import { Component, ElementRef, OnInit, Renderer2 } from '@angular/core';
import { SocketService } from '../../../ems.utilities/services/socket.service';
import { ToastrService } from 'ngx-toastr';
import { FormControl, FormGroup, Validators } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { AES, enc } from 'crypto-js';

interface IAppointmentorder {
  appointmentorder_gid: string;
  temp_address1: string;
  temp_address2: string;
  email_address: string;
  experience_detail: string;
  appointment_date: string;
  perm_address1: string;
  gender: string;
  temp_pincode: string;
  branch_name: string;
  qualification: string;
  joiningdate: string;
  perm_country: string;
  temp_country: string;
  perm_city: string;
  department_name: string;
  designation_name: string;
  perm_state: string;
  first_name: string;
  employee_salary: string;
  perm_address2: string;
  perm_pincode: string;
  mobile_number: string;
  last_name: string;
  temp_state: string;
  temp_city: string;
  dob: string;

}

@Component({
  selector: 'app-hrm-trn-appointmentorderedit',
  templateUrl: './hrm-trn-appointmentorderedit.component.html',
  styleUrls: ['./hrm-trn-appointmentorderedit.component.scss']
})


export class HrmTrnAppointmentordereditComponent {
  appointmentorder!: IAppointmentorder;
  reactiveForm!: FormGroup;
  appointmentorderform: any;
  responsedata: any;
  selectedbranch: any;
  branch_list: any;
  department_list: any;
  designation_list: any;
  selecteddepartment: any;
  selecteddesignation: any;
  selectedCountry1: any;
  selectedCountry2: any;
  country_list1: any;
  country_list: any;
  selectedcountry: any;
  appointmentordergid: any;
  editappoinmentorder: any;
  email_address: any;
 

  constructor(private renderer: Renderer2, private el: ElementRef, public service: SocketService, private ToastrService: ToastrService, private route: Router, private router: ActivatedRoute) {
    this.appointmentorder = {} as IAppointmentorder;
  }

  ngOnInit(): void {
    const appointmentorder_gid = this.router.snapshot.paramMap.get('appointmentorder_gid');
    this.appointmentordergid = appointmentorder_gid

    const secretKey = 'storyboarderp';

    const deencryptedParam = AES.decrypt(this.appointmentordergid, secretKey).toString(enc.Utf8);
    console.log(deencryptedParam)

    this.appointmentorderform = new FormGroup({

      branch_name: new FormControl(this.appointmentorder.branch_name, [
        Validators.required,
      ]),
      appointmentorder_gid: new FormControl(this.appointmentorder.appointmentorder_gid, [
        Validators.required,
      ]),


      appointment_date: new FormControl(this.appointmentorder.appointment_date, [
        Validators.required,
      ]),
      first_name: new FormControl(this.appointmentorder.first_name, [
        Validators.required,
      ]),
      last_name: new FormControl(this.appointmentorder.last_name, [
        Validators.required,
      ]),
      gender: new FormControl(this.appointmentorder.gender, [
        Validators.required,
      ]),
      experience_detail: new FormControl(this.appointmentorder.experience_detail, [
        Validators.required,
      ]),
      dob: new FormControl(this.appointmentorder.dob, [
        Validators.required,
      ]),
      mobile_number: new FormControl(this.appointmentorder.mobile_number, [
        Validators.required,
      ]),
      email_address: new FormControl(this.appointmentorder.email_address, [
        Validators.required,
        Validators.minLength(1),
        Validators.maxLength(250), Validators.pattern('^([a-z0-9]+(?:[-.][a-z0-9]+)*)@([a-z0-9]+\\.[a-z]{2,20}(\\.[a-z]{2})?|\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\]|localhost)$')
      ]),
      joiningdate: new FormControl(this.appointmentorder.joiningdate, [
        Validators.required,
      ]),
      qualification: new FormControl(this.appointmentorder.qualification, [
        Validators.required,
      ]),
      department_name: new FormControl(this.appointmentorder.department_name, [
        Validators.required,
      ]),
      designation_name: new FormControl(this.appointmentorder.designation_name, [
        Validators.required,
      ]),
      employee_salary: new FormControl(this.appointmentorder.employee_salary, [
        Validators.required,
      ]),
      perm_address1: new FormControl(this.appointmentorder.perm_address1, [
        Validators.required,
      ]),
      perm_address2: new FormControl(this.appointmentorder.perm_address2, [
        Validators.required,
      ]),
      perm_country: new FormControl(this.appointmentorder.perm_country, [
        Validators.required,
      ]),
      perm_state: new FormControl(this.appointmentorder.perm_state, [
        Validators.required,
      ]),
      perm_city: new FormControl(this.appointmentorder.perm_city, [
        Validators.required,
      ]),
      perm_pincode: new FormControl(this.appointmentorder.perm_pincode, [
        Validators.required,
      ]),
      temp_address1: new FormControl(this.appointmentorder.temp_address1, [
        Validators.required,
      ]),
      temp_address2: new FormControl(this.appointmentorder.temp_address2, [
        Validators.required,
      ]),
      temp_country: new FormControl(this.appointmentorder.temp_country, [
        Validators.required,
      ]),
      temp_state: new FormControl(this.appointmentorder.temp_state, [
        Validators.required,
      ]),
      temp_city: new FormControl(this.appointmentorder.temp_city, [
        Validators.required,
      ]),
      temp_pincode: new FormControl(this.appointmentorder.temp_pincode, [
        Validators.required,
      ]),
    });

    var api1 = 'AppointmentOrder/Getbranchdropdown';
    this.service.get(api1).subscribe((result: any) => {
      this.branch_list = result.Getbranchdropdown;

    });

    var api2 = 'AppointmentOrder/Getdepartmentdropdown';
    this.service.get(api2).subscribe((result: any) => {
      this.department_list = result.Getdepartmentdropdown;
    });

    var api3 = 'AppointmentOrder/Getdesignationdropdown';
    this.service.get(api3).subscribe((result: any) => {
      this.designation_list = result.Getdesignationdropdown;
    });

    // var api4 = 'AppointmentOrder/Getcountrydropdown';
    // this.service.get(api4).subscribe((result: any) => {
    //   this.country_list1 = result.Getdesignationdropdown;
    // });

    this.Geteditappoinmentorder(deencryptedParam)
  }

  get branchnamecontrol() {
    return this.appointmentorderform.get('branch_name');
  }
  get appointmentrefcontrol() {
    return this.appointmentorderform.get('appointmentorder_gid');
  }
  get firstnamecontrol() {
    return this.appointmentorderform.get('first_name');
  }
  get lastnamecontrol() {
    return this.appointmentorderform.get('last_name');
  }
  get experiencecontrol() {
    return this.appointmentorderform.get('experience_detail');
  }
  get mobilecontrol() {
    return this.appointmentorderform.get('mobile_number');
  }
  get emailcontrol() {
    return this.appointmentorderform.get('email_address');
  }
  get joiningdatecontrol() {
    return this.appointmentorderform.get('joiningdate');
  }
  get dobcontrol() {
    return this.appointmentorderform.get('dob');
  }
  get appointmentdatecontrol() {
    return this.appointmentorderform.get('appointment_date');
  }
  get qualificationcontrol() {
    return this.appointmentorderform.get('qualification');
  }
  get departmentnamecontrol() {
    return this.appointmentorderform.get('department_name');
  }
  get designationnamecontrol() {
    return this.appointmentorderform.get('designation_name');
  }
  get salarycontrol() {
    return this.appointmentorderform.get('employee_salary');
  }
  get permaddress1control() {
    return this.appointmentorderform.get('perm_address1');
  }
  get permaddress2control() {
    return this.appointmentorderform.get('perm_address2');
  }
  get permcountrycontrol() {
    return this.appointmentorderform.get('country');
  }
  get permstatecontrol() {
    return this.appointmentorderform.get('perm_state');
  }
  get permcitycontrol() {
    return this.appointmentorderform.get('perm_city');
  }
  get permpincodecontrol() {
    return this.appointmentorderform.get('perm_pincode');
  }
  get tempaddress1control() {
    return this.appointmentorderform.get('temp_address1');
  }
  get tempaddress2control() {
    return this.appointmentorderform.get('temp_address2');
  }
  get tempcountrycontrol() {
    return this.appointmentorderform.get('country');
  }
  get tempstatecontrol() {
    return this.appointmentorderform.get('temp_state');
  }
  get tempcitycontrol() {
    return this.appointmentorderform.get('temp_city');
  }
  get temppincodecontrol() {
    return this.appointmentorderform.get('temp_pincode');
  }

  Geteditappoinmentorder(appointmentorder_gid: any) {
    var url = 'AppointmentOrder/editappoinmentorder'
    let param = { appointmentorder_gid: appointmentorder_gid }
    this.service.getparams(url, param).subscribe((result: any) => {
      this.responsedata = result;
      this.editappoinmentorder = result.editappoinmentorder;

      this.appointmentorderform.get("branch_name")?.setValue(this.editappoinmentorder[0].branch_name);
      this.appointmentorderform.get("appointmentorder_gid")?.setValue(this.editappoinmentorder[0].appointmentorder_gid);
      this.appointmentorderform.get("appointment_date")?.setValue(this.editappoinmentorder[0].appointment_date);
      this.appointmentorderform.get("first_name")?.setValue(this.editappoinmentorder[0].first_name);
      this.appointmentorderform.get("last_name")?.setValue(this.editappoinmentorder[0].last_name);

      this.selectedbranch = this.editappoinmentorder[0].branch_gid;
      this.selecteddepartment = this.editappoinmentorder[0].department_gid;
      this.selecteddesignation = this.editappoinmentorder[0].designation_gid;
      this.appointmentorderform.get("gender")?.setValue(this.editappoinmentorder[0].gender);
      this.appointmentorderform.get("experience_detail")?.setValue(this.editappoinmentorder[0].experience_detail);
      this.appointmentorderform.get("dob")?.setValue(this.editappoinmentorder[0].dob);

      this.appointmentorderform.get("mobile_number")?.setValue(this.editappoinmentorder[0].mobile_number);
      this.appointmentorderform.get("email_address")?.setValue(this.editappoinmentorder[0].email_address);
      this.appointmentorderform.get("joiningdate")?.setValue(this.editappoinmentorder[0].joiningdate);
      this.appointmentorderform.get("qualification")?.setValue(this.editappoinmentorder[0].qualification);
      this.appointmentorderform.get("department_name")?.setValue(this.editappoinmentorder[0].department_name);
      this.appointmentorderform.get("designation_name")?.setValue(this.editappoinmentorder[0].designation_name);
      this.appointmentorderform.get("employee_salary")?.setValue(this.editappoinmentorder[0].employee_salary);
      this.appointmentorderform.get("perm_address1")?.setValue(this.editappoinmentorder[0].perm_address1);
      this.appointmentorderform.get("perm_address2")?.setValue(this.editappoinmentorder[0].perm_address2);
      this.appointmentorderform.get("perm_country")?.setValue(this.editappoinmentorder[0].perm_country);
      this.appointmentorderform.get("perm_state")?.setValue(this.editappoinmentorder[0].perm_state);
      this.appointmentorderform.get("perm_city")?.setValue(this.editappoinmentorder[0].perm_city);
      this.appointmentorderform.get("perm_pincode")?.setValue(this.editappoinmentorder[0].perm_pincode);
      this.appointmentorderform.get("temp_address1")?.setValue(this.editappoinmentorder[0].temp_address1);
      this.appointmentorderform.get("temp_address2")?.setValue(this.editappoinmentorder[0].temp_address2);
      this.appointmentorderform.get("temp_country")?.setValue(this.editappoinmentorder[0].temp_country);
      this.appointmentorderform.get("temp_state")?.setValue(this.editappoinmentorder[0].temp_state);
      this.appointmentorderform.get("temp_city")?.setValue(this.editappoinmentorder[0].temp_city);
      this.appointmentorderform.get("temp_pincode")?.setValue(this.editappoinmentorder[0].temp_pincode);


    });
  }

  public validate(): void {
    this.appointmentorder = this.appointmentorderform.value;
    console.log(this.appointmentorderform)
    if (this.appointmentorder.branch_name != null && this.appointmentorder.appointment_date != null && this.appointmentorder.first_name != null && this.appointmentorder.last_name != null
      && this.appointmentorder.gender != null && this.appointmentorder.experience_detail != null &&
      this.appointmentorder.dob != null && this.appointmentorder.mobile_number != null &&  this.appointmentorder.email_address != null && this.appointmentorder.joiningdate != null && this.appointmentorder.qualification != null && this.appointmentorder.department_name != null 
      && this.appointmentorder.designation_name != null && this.appointmentorder.employee_salary != null && this.appointmentorder.perm_address1 != null && this.appointmentorder.perm_address2 != null && this.appointmentorder.perm_country != null &&
      this.appointmentorder.perm_state != null && this.appointmentorder.perm_city != null && this.appointmentorder.perm_pincode != null &&
      this.appointmentorder.temp_address1 != null && this.appointmentorder.temp_address2 != null && this.appointmentorder.temp_country != null &&
      this.appointmentorder.temp_state != null && this.appointmentorder.temp_city != null && this.appointmentorder.temp_pincode != null ) {
      console.log(this.appointmentorderform.value)

      const api = 'AppointmentOrder/Updatedappointmentorder';

      this.service.post(api, this.appointmentorderform.value).subscribe((result: any) => {
        if (result.status == false) {
          this.ToastrService.warning(result.message)
        }
        else {
          this.route.navigate(['/hrm/HrmTrnAppointmentorder']);
          this.ToastrService.success(result.message)
        }
        this.responsedata = result;
      });
    }
  }
}





































































































