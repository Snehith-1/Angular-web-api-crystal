import { Component, ElementRef, OnInit, Renderer2 } from '@angular/core';
import flatpickr from 'flatpickr';
import { Options } from 'flatpickr/dist/types/options';
import { SocketService } from 'src/app/ems.utilities/services/socket.service';
import { ToastrService } from 'ngx-toastr';
import { FormControl, FormGroup, Validators } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { AES, enc } from 'crypto-js';
interface ILeadbankedit{
  leadbank_gid:string;
  company_website: string;
  phone2: string;
  phone1: string;
  fax: string;
  email: string;
  leadbank_address1: string;
  leadbank_address2: string;
  leadbank_city: string;
  leadbank_state: string;
  leadbank_pin: string;
  active_flag: string;
  addtocustomer: string;
  status: string;
  region_name: string;
  source_name: string;
  country_name: string;
  leadbank_name: string;
  categoryindustry_name: string;
  designation: string;
  leadbankcontact_name: string;
  user_code: string;
  remarks: string;
  referred_by: string;
  mobile: string;
}
@Component({
  selector: 'app-crm-trn-leadbankedit',
  templateUrl: './crm-trn-leadbankedit.component.html',
  styleUrls: ['./crm-trn-leadbankedit.component.scss']
})
export class CrmTrnLeadbankeditComponent implements OnInit {
  leadbankeditlist!: ILeadbankedit;
  reactiveForm!: FormGroup;
  entity_list: any[] = [];
  source_list: any[] = [];
  industryList: any[] = [];
  regionnamelist: any[] = [];
  designation_list: any[] = [];
  country_list: any[] = [];
  Email_Address: any;
  responsedata: any;
  selectedsource_name: any;
  selectedregion_name: any;
  selectedcategoryindustry_name: any;
  selectedcountry_name: any;

  leadbank_gid: any;
  leadbankedit_list: any;

  constructor(private renderer: Renderer2, private el: ElementRef, public service: SocketService, private ToastrService: ToastrService, private route: Router,private router: ActivatedRoute) {
    this.leadbankeditlist = {} as ILeadbankedit;
  }

  ngOnInit(): void {

    const leadbank_gid = this.router.snapshot.paramMap.get('leadbank_gid');
    // console.log(termsconditions_gid)
    this.leadbank_gid = leadbank_gid;

    const secretKey = 'storyboarderp';

    const deencryptedParam = AES.decrypt(this.leadbank_gid, secretKey).toString(enc.Utf8);
    console.log(deencryptedParam)
    this.GetleadbankeditSummary(deencryptedParam)


    this.reactiveForm = new FormGroup({
      leadbankcontact_name: new FormControl(this.leadbankeditlist.leadbankcontact_name, [
        Validators.required,
      ]),
      leadbank_name: new FormControl(this.leadbankeditlist.leadbank_name, [
        Validators.required,
      ]),
      referred_by: new FormControl(this.leadbankeditlist.referred_by, [
        Validators.required,
      ]),

      leadbank_address2: new FormControl(''),
      leadbank_state: new FormControl(''),
      remarks: new FormControl(''),
      status: new FormControl('Y'),
      active_flag: new FormControl('Y'),
      leadbank_pin: new FormControl(''),
      leadbank_city: new FormControl(''),
      addtocustomer: new FormControl('N'),
      region_name: new FormControl(this.leadbankeditlist.region_name, [
        Validators.required,
        Validators.minLength(1),
        Validators.maxLength(250),
      ]),
      source_name: new FormControl(this.leadbankeditlist.source_name, [
        Validators.required,
        Validators.minLength(1),
        Validators.maxLength(250),
      ]),

      phone2: new FormControl(this.leadbankeditlist.phone2, [
        Validators.required,
        Validators.maxLength(10),
      ]),
      phone1: new FormControl(this.leadbankeditlist.phone1, [
        Validators.required,
        Validators.maxLength(10),
      ]),
      fax: new FormControl(this.leadbankeditlist.fax, [
        Validators.required,
        Validators.maxLength(10),
      ]),

      mobile: new FormControl(this.leadbankeditlist.mobile, [
        Validators.required,
        Validators.maxLength(10),
      ]),
      categoryindustry_name: new FormControl(this.leadbankeditlist.categoryindustry_name, [
        Validators.required,
        Validators.minLength(1),
      ]),
      designation: new FormControl(this.leadbankeditlist.designation, [
        Validators.required,
        Validators.minLength(1),
      ]),
      country_name: new FormControl(this.leadbankeditlist.country_name, [
        Validators.minLength(1),
      ]),
      leadbank_address1: new FormControl(this.leadbankeditlist.leadbank_address1, [
        Validators.maxLength(1000),
      ]),
      email: new FormControl(this.leadbankeditlist.email, [
        Validators.required,
        Validators.minLength(1),
        Validators.maxLength(250), Validators.pattern('^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$')
      ]),
      company_website: new FormControl(this.leadbankeditlist.company_website, [
        Validators.required,
        Validators.minLength(1),
        Validators.maxLength(250),
        Validators.pattern('^(https?://)?([a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4})(/[a-zA-Z0-9%.-]*)*(\\?[a-zA-Z0-9.-_]+=[a-zA-Z0-9.-_]+)*/?$')
      ]),
    });

    var api1 = 'Leadbank/Getsourcedropdown'
    this.service.get(api1).subscribe((result: any) => {
      this.responsedata = result;
      this.source_list = result.source_list;
      //console.log(this.source_list)
    });

    var api2 = 'Leadbank/Getregiondropdown'
    this.service.get(api2).subscribe((result: any) => {
      this.responsedata = result;
      this.regionnamelist = result.regionname_list;
    });

    var api3 = 'Leadbank/Getindustrydropdown'
    this.service.get(api3).subscribe((result: any) => {
      this.responsedata = result;
      this.industryList = result.industryname_list;
    });

    var api5 = 'Leadbank/Getcountrynamedropdown'
    this.service.get(api5).subscribe((result: any) => {
      this.responsedata = result;
      this.country_list = result.country_list;
    });
  }


  get branchname() {
    return this.reactiveForm.get('branchname')!;
  }
  get categoryindustry_name() {
    return this.reactiveForm.get('categoryindustry_name')!;
  }
  get designation() {
    return this.reactiveForm.get('designation')!;
  }
  get country_name() {
    return this.reactiveForm.get('country_name')!;
  }
  get region_name() {
    return this.reactiveForm.get('region_name')!;
  }

  get leadbank_name() {
    return this.reactiveForm.get('leadbank_name')!;
  }

  get leadbankcontact_name() {
    return this.reactiveForm.get('leadbankcontact_name')!;
  }
  get referred_by() {
    return this.reactiveForm.get('referred_by')!;
  }
  get mobile() {
    return this.reactiveForm.get('mobile')!;
  }
  get phone1() {
    return this.reactiveForm.get('phone1')!;
  }
  get phone2() {
    return this.reactiveForm.get('phone2')!;
  }

  get email() {
    return this.reactiveForm.get('email')!;
  }

  get password() {
    return this.reactiveForm.get('password')!;
  }
  get fax() {
    return this.reactiveForm.get('fax')!;
  }
  get company_website() {
    return this.reactiveForm.get('company_website')!;
  }

  get addtocustomer() {
    return this.reactiveForm.get('addtocustomer')!;
  }

  get status() {
    return this.reactiveForm.get('status')!;
  }

  get source_name() {
    return this.reactiveForm.get('source_name')!;
  }

  get remarks() {
    return this.reactiveForm.get('remarks')!;
  }


  GetleadbankeditSummary(leadbank_gid: any) {
    var url = 'Leadbank/GetleadbankeditSummary'
    let param = {
      leadbank_gid : leadbank_gid 
    }
    this.service.getparams(url, param).subscribe((result: any) => {
      // this.responsedata=result;
      this.leadbankedit_list = result.leadbankedit_list;
      console.log(this.leadbankedit_list)
      console.log(this.leadbankedit_list[0].branch_gid)
      this.reactiveForm.get("mobile")?.setValue(this.leadbankedit_list[0].mobile);
      this.reactiveForm.get("region_name")?.setValue(this.leadbankedit_list[0].region_name);
      this.reactiveForm.get("source_name")?.setValue(this.leadbankedit_list[0].source_name);
      this.reactiveForm.get("categoryindustry_name")?.setValue(this.leadbankedit_list[0].categoryindustry_name);
      this.selectedregion_name = this.leadbankedit_list[0].region_gid;
      this.selectedsource_name = this.leadbankedit_list[0].source_gid;
      this.selectedcategoryindustry_name= this.leadbankedit_list[0].categoryindustry_gid;
      this.selectedcountry_name=this.leadbankedit_list[0].country_gid;
      this.reactiveForm.get("leadbank_name")?.setValue(this.leadbankedit_list[0].leadbank_name);
      this.reactiveForm.get("active_flag")?.setValue(this.leadbankedit_list[0].active_flag);
      this.reactiveForm.get("leadbankcontact_name")?.setValue(this.leadbankedit_list[0].leadbankcontact_name);
      this.reactiveForm.get("leadbank_address1")?.setValue(this.leadbankedit_list[0].leadbank_address1);
      this.reactiveForm.get("leadbank_address2")?.setValue(this.leadbankedit_list[0].leadbank_address2);
      this.reactiveForm.get("leadbank_city")?.setValue(this.leadbankedit_list[0].leadbank_city);
      this.reactiveForm.get("leadbank_state")?.setValue(this.leadbankedit_list[0].leadbank_state);
      this.reactiveForm.get("email")?.setValue(this.leadbankedit_list[0].email);
      this.reactiveForm.get("leadbank_pin")?.setValue(this.leadbankedit_list[0].leadbank_pin);
     });
  }

  public validate(): void {
    console.log(this.reactiveForm.value)
    this.leadbankeditlist = this.reactiveForm.value;
    if (this.leadbankeditlist.leadbank_name != null) {
      console.log("update is working");
      var api7 = 'Leadbank/Updateleadbank'
      this.service.post(api7, this.leadbankeditlist).subscribe((result: any) => {
        if (result.status == false) {
          this.ToastrService.warning(result.message)
        }
        else {
          this.route.navigate(['/crm/CrmTrnLeadbanksummary']);
          this.ToastrService.success(result.message)
        }
        this.responsedata = result;
      });
    }
    else {
      this.ToastrService.warning('Kindly Fill All Mandatory Fields !! ')
    }
    return;
  }
}
