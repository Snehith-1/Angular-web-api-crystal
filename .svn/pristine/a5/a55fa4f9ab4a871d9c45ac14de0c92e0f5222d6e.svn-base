import { Component, ViewChild } from "@angular/core";
import { ChartComponent } from "ng-apexcharts";
import { FormBuilder, FormGroup, Validators,FormControl } from '@angular/forms';
import { ToastrService } from 'ngx-toastr';
import { AES } from 'crypto-js';

import { Subscription, Observable } from 'rxjs';
import { first } from 'rxjs/operators';
import { ActivatedRoute, Router } from '@angular/router';
import { SocketService } from '../../../ems.utilities/services/socket.service';
import {
  ApexNonAxisChartSeries,
  ApexResponsive,
  ApexChart
} from "ng-apexcharts";

export type ChartOptions1 = {
  series: ApexNonAxisChartSeries;
  chart: ApexChart;
  responsive: ApexResponsive[];
  labels: any;
};

@Component({
  selector: 'app-crm-dashboard',
  templateUrl: './crm-dashboard.component.html',
  styleUrls: ['./crm-dashboard.component.scss']
})

export class CrmDashboardComponent {
  chartOptions: any = {};

  chartOptions1: any = {};
 
  response_data :any;

  DashboardCount_List :any;

  DashboardQuotationAmt_List :any;

  noquotation :any;

  year : any;
  
  noquotation_status : any;

  show = true;
  
  constructor(private fb: FormBuilder,private route: ActivatedRoute,private router: Router,private service: SocketService,private ToastrService: ToastrService) 
  {
   
}
ngOnInit(): void {
  this.chartOptions = getChartOptions(350);

    var api = 'CrmDashboard/GetDashboardCount';
    this.service.get(api).subscribe((result:any) => {
    this.response_data = result;
    this.DashboardCount_List = this.response_data.getDashboardCount_List; 
     
      let mycalls_count = Number(this.DashboardCount_List[0].mycalls_count);
      let myleads_count = Number(this.DashboardCount_List[0].myleads_count);
      let myappointments_count = Number(this.DashboardCount_List[0].myappointments_count);
      let assignvisit_count = Number(this.DashboardCount_List[0].assignvisit_count);
      let completedvisit_count = Number(this.DashboardCount_List[0].completedvisit_count);
      let shared_proposal = Number(this.DashboardCount_List[0].shared_proposal);
      let completedorder_count = Number(this.DashboardCount_List[0].completedorder_count);
      let totalorder_count = Number(this.DashboardCount_List[0].totalorder_count);

      this.chartOptions1 = {
        series: [mycalls_count, myleads_count, myappointments_count, assignvisit_count, completedvisit_count,shared_proposal,completedorder_count,totalorder_count],     
        chart: {
          width: 430,
          type: "pie"
        },
        labels: ["My Calls", "Appointments", "Appointments", "Completed Visit", "My Leads","Shared Proposals","Completed Order","Total Order"],
        responsive: [
          {
            breakpoint: 480,
            options: {
              chart: {
                width: 200
              },
              legend: {
                position: "bottom"
              }
            }
          }
        ]
    
        
      };

    }); 

    
    var api = 'CrmDashboard/GetDashboardQuotationAmount';
    this.service.get(api).subscribe((result:any) => {
    this.response_data = result;
    this.DashboardQuotationAmt_List = this.response_data.getDashboardQuotationAmt_List; 
    console.log (this.DashboardQuotationAmt_List,'amt');
    if(this.DashboardQuotationAmt_List == null) {
      this.noquotation = 'Quotation Amount Not Available Upto Till Now....';
      this.show = true;
    }
    else {
      this.show = false;
    }
    this.year=this.DashboardQuotationAmt_List[0].year;
    
    }); 
      
   
} 



}

 

function getChartOptions(height: number) {
  const labelColor = '#000'; 
  const borderColor = '#e6ccb2';
  const secondaryColor = '#f1841e'
  const baseColor1 = '#047beb';
  const secondaryColor1 = '#e63423'
  const baseColor = '#047beb';  

  return {
    series: [

      
      // {
      //   name: 'Active users',
      //   data: [50, 60, 70, 80, 60, 50, 70, 60],
      // },
      // {
      //   name: 'Inactive Users',
      //   data: [50, 60, 70, 80, 60, 50, 70, 60],
      // },
      {
        name: 'Onboarding',
        data: [20, 40, 30, 70, 60, 10],
      },
      // {
      //   name: 'Relieving',
      //   data: [50, 60, 70, 80, 60, 50, 70, 60],
      // },
    ],
    chart: {
      fontFamily: 'inherit',
      type: 'bar',
      height: height,
      toolbar: {
        show: false,
      },
    },
    plotOptions: {
      bar: {
        horizontal: false,
        columnWidth: '20%',
        borderRadius: 2,
      },
    },
    legend: {
      show: false,
    },
    dataLabels: {
      enabled: false,
    },
    stroke: {
      show: true,
      width: 2,
      colors: ['transparent'],
    },
    xaxis: {
      categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],
      axisBorder: {
        show: false,
      },
      axisTicks: {
        show: false,
      },
      labels: {
        style: {
          colors: labelColor,
          fontSize: '12px',
        },
      },
    },
    yaxis: {
      labels: {
        style: {
          colors: labelColor,
          fontSize: '12px',
        },
      },
    },
    fill: {
      type: 'solid',
    },
    states: {
      normal: {
        filter: {
          type: 'none',
          value: 0,
        },
      },
      hover: {
        filter: {
          type: 'none',
          value: 0,
        },
      },
      active: {
        allowMultipleDataPointsSelection: false,
        filter: {
          type: 'none',
          value: 0,
        },
      },
    },

    colors: [baseColor, secondaryColor,baseColor1, secondaryColor1],
    grid: {
      padding: {
        top: 10,
      },
      borderColor: borderColor,
      strokeDashArray: 4,
      yaxis: {
        lines: {
          show: true,
        },
      },
    },
  };
 
  
}




