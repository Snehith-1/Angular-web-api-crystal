import { Component, OnInit, OnDestroy, ChangeDetectorRef } from '@angular/core';
import { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';
import { ToastrService } from 'ngx-toastr';
import { AES, enc } from 'crypto-js';

import { Subscription, Observable } from 'rxjs';
import { first } from 'rxjs/operators';
import { ActivatedRoute, Router } from '@angular/router';
import { SocketService } from '../../../ems.utilities/services/socket.service';
interface Ileadbank {
  leadbank_gid: string;
}
@Component({
  selector: 'app-crm-trn-leadbankcontact',
  templateUrl: './crm-trn-leadbankcontact.component.html',
  styleUrls: ['./crm-trn-leadbankcontact.component.scss']
})
export class CrmTrnLeadbankcontactComponent {
  leadbank!: Ileadbank;
  leadbank_gid: any;
  lsleadbank_gid: any;

  contactlist: any[] = [];
  response_data: any;
  branch_list: any;
  contactform: FormGroup<{}> | any;


  constructor(private fb: FormBuilder, private route: ActivatedRoute, private router: Router, private service: SocketService, private ToastrService: ToastrService,) {
    this.leadbank = {} as Ileadbank;
    this.leadbank = {} as Ileadbank;
    this.contactform = new FormGroup({
      leadbankbranch_name: new FormControl('', Validators.required),
      leadbankcontact_name: new FormControl('', [Validators.required, Validators.pattern('^[A-Za-z]+$')]),
      mobile: new FormControl('', Validators.required),
      email: new FormControl('', [Validators.required, Validators.pattern("^([a-z0-9-]+|[a-z0-9-]+([.][a-z0-9-]+)*)@([a-z0-9-]+\.[a-z]{2,20}(\.[a-z]{2})?|\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\]|localhost)$")]),
      designation: new FormControl('', [Validators.required, Validators.pattern('^[A-Za-z]+$')]),
      fax_area_code: new FormControl('', [Validators.required, Validators.minLength(3), Validators.maxLength(3),]),
      fax_country_code: new FormControl('', [Validators.required, Validators.minLength(2), Validators.maxLength(2),]),
      fax: new FormControl('', [Validators.required, Validators.minLength(7), Validators.maxLength(7),]),
      country_code1: new FormControl('', [Validators.required, Validators.minLength(3), Validators.maxLength(3),]),
      area_code1: new FormControl('', [Validators.required, Validators.minLength(4), Validators.maxLength(4),]),
      phone1: new FormControl('', [Validators.required, Validators.minLength(3), Validators.maxLength(3),]),
      country_code2: new FormControl('', [Validators.required, Validators.minLength(3), Validators.maxLength(3),]),
      area_code2: new FormControl('', [Validators.required, Validators.minLength(3), Validators.maxLength(3),]),
      phone2: new FormControl('', [Validators.required, Validators.minLength(4), Validators.maxLength(4),]),
      leadbank_gid: new FormControl(this.leadbank_gid),

    });
  }
  ngOnInit(): void {
    const leadbank_gid = this.route.snapshot.paramMap.get('leadbank_gid');
    // console.log(termsconditions_gid)
    this.lsleadbank_gid = leadbank_gid;

    const secretKey = 'storyboarderp';

    const deencryptedParam = AES.decrypt(this.lsleadbank_gid, secretKey).toString(enc.Utf8);

    console.log(deencryptedParam)
    if (deencryptedParam != null) {
      this.leadbank_gid = (deencryptedParam);


    }
    this.Getbranchdropdown(this.leadbank_gid);



    this.GetleadbankcontactaddSummary(this.leadbank_gid);

  }
  GetleadbankcontactaddSummary(leadbank_gid: any) {

    var api = 'Leadbank/GetleadbankcontactaddSummary';
    let param = {
      leadbank_gid: leadbank_gid
    }
    this.service.getparams(api, param).subscribe((result: any) => {
      this.response_data = result;
      this.contactlist = this.response_data.leadbank_list;
      setTimeout(() => {
        $('#product').DataTable();
      }, 1);
    });

  }
  Getbranchdropdown(leadbank_gid: any) {

    var api = 'Leadbank/Getbranchdropdown';
    let param = {
      leadbank_gid: leadbank_gid
    }
    this.service.getparams(api, param).subscribe((result: any) => {
      this.response_data = result;
      this.branch_list = this.response_data.leadbankcontact_list;

    });
  }
  initForm() {
    this.contactform = this.fb.group({
      leadbankbranch_name: [
        this.contactform.leadbankbranch_name,
        Validators.compose([

          Validators.required,
        ]),
      ],
      leadbankcontact_name: [
        this.contactform.leadbankcontact_name,
        Validators.compose([
          Validators.required,
          Validators.pattern('^[A-Za-z ]+$')



        ]),
      ],

      mobile: [
        this.contactform.mobile,
        Validators.compose([
          Validators.required

        ]),
      ],
      designation: [
        this.contactform.designation,
        Validators.compose([
          Validators.required,
          Validators.pattern('^[A-Za-z ]+$')

        ]),
      ],
      country_code2: [
        this.contactform.country_code2,
        Validators.compose([
          Validators.required,
          Validators.minLength(3),
          Validators.maxLength(3),

        ]),
      ],
      area_code2: [
        this.contactform.area_code2,
        Validators.compose([
          Validators.required,
          Validators.minLength(3),
          Validators.maxLength(3),

        ]),
      ],
      phone2: [
        this.contactform.phone2,
        Validators.compose([
          Validators.required,
          Validators.minLength(4),
          Validators.maxLength(4),

        ]),
      ],
      country_code1: [
        this.contactform.country_code1,
        Validators.compose([
          Validators.required,
          Validators.minLength(3),
          Validators.maxLength(3),

        ]),
      ],
      area_code1: [
        this.contactform.area_code1,
        Validators.compose([
          Validators.required,
          Validators.minLength(3),
          Validators.maxLength(3),

        ]),
      ],
      phone1: [
        this.contactform.phone1,
        Validators.compose([
          Validators.required,
          Validators.minLength(4),
          Validators.maxLength(4),

        ]),
      ],
      fax_area_code: [
        this.contactform.fax_area_code,
        Validators.compose([
          Validators.required,
          Validators.minLength(3),
          Validators.maxLength(3),

        ]),
      ],
      fax_country_code: [
        this.contactform.fax_country_code,
        Validators.compose([
          Validators.required,
          Validators.minLength(2),
          Validators.maxLength(2),

        ]),
      ],
      fax: [
        this.contactform.fax,
        Validators.compose([
          Validators.required,
          Validators.minLength(7),
          Validators.maxLength(7),


        ]),
      ],
      leadbank_gid: new FormControl(this.leadbank_gid),
      email: [this.contactform.email, [Validators.required, Validators.pattern("^([a-z0-9-]+|[a-z0-9-]+([.][a-z0-9-]+)*)@([a-z0-9-]+\.[a-z]{2,20}(\.[a-z]{2})?|\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\]|localhost)$")
      ]],


    });

  }
  get leadbankcontact_name() {
    return this.contactform.get('leadbankcontact_name ')!;
  }
  get designation() {
    return this.contactform.get('designation ')!;
  }
  get fax_area_code() {
    return this.contactform.get('fax_area_code')!;
  }
  get fax_country_code() {
    return this.contactform.get('fax_country_code')!;
  }
  get fax() {
    return this.contactform.get('fax')!;
  }
  get phone1() {
    return this.contactform.get('phone1')!;
  }
  get area_code1() {
    return this.contactform.get('area_code1')!;
  }
  get country_code1() {
    return this.contactform.get('country_code1')!;
  }
  get phone2() {
    return this.contactform.get('phone2')!;
  }
  get area_code2() {
    return this.contactform.get('area_code2')!;
  }
  get country_code2() {
    return this.contactform.get('country_code2')!;
  }
  get mobile() {
    return this.contactform.get('mobile')!;
  }
  get email() {
    return this.contactform.get('email')!;
  }


  onedit(params: any) {
    const secretKey = 'storyboarderp';
    const param = (params);
    const encryptedParam = AES.encrypt(param, secretKey).toString();
    this.router.navigate(['/crm/CrmTrnLeadbankcontactEdit', encryptedParam])
  }

  onadd() {
    // debugger

    console.log(this.contactform)
    if (this.contactform.value.leadbankcontact_name != null && this.contactform.value.designation != null) {

      for (const control of Object.keys(this.contactform.controls)) {
        this.contactform.controls[control].markAsTouched();
      }

      var api = 'Leadbank/Postleadbankcontactadd';
      this.service.post(api, this.contactform.value).subscribe(
        (result: any) => {
          if (result.status == false) {
            this.ToastrService.warning(result.message)
          }
          else {
            this.router.navigate(['/crm/CrmTrnLeadbankcontact']);
            this.ToastrService.success(result.message)
          }
          this.response_data = result;
        });
    }
    else {
      this.ToastrService.warning('Kindly Fill All Mandatory Fields !! ')
    }
  }

  redirecttolist() {
    this.router.navigate(['/crm/CrmTrnLeadbanksummary']);

  }
}