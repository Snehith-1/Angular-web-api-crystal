import { Component } from '@angular/core';
import { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';
import { ToastrService } from 'ngx-toastr';
import { SocketService } from 'src/app/ems.utilities/services/socket.service';
import { Router } from '@angular/router';
import { AES } from 'crypto-js';
import { NgxSpinnerService } from 'ngx-spinner';
import { SelectionModel } from '@angular/cdk/collections';
import flatpickr from 'flatpickr';
import { Options } from 'flatpickr/dist/types/options';
import { NgbTimepickerModule, NgbTimeStruct } from '@ng-bootstrap/ng-bootstrap';
import { param } from 'jquery';
export class ICampaign {
  campaign_gid: string = "";
  campaign_list: string[] = [];
  assign_user: string = "";
  team_name: string = "";
  team_member: string = "";
  schedule_remarks: string = "";
  schedule_date: string = "";
  schedule_time: string = "";
  schedule_type: string = "";

}


interface ITransfer {
  team_name: string;
  team_member: string;
  schedule_date: string;
  schedule_time: string;
  schedule_type: string;
  schedule_remarks: string;

}
@Component({
  selector: 'app-crm-trn-upcomingmarketing',
  templateUrl: './crm-trn-upcomingmarketing.component.html',
  styleUrls: ['./crm-trn-upcomingmarketing.component.scss']
})
export class CrmTrnUpcomingmarketingComponent {

  upcoming:any;
  countlist: any[] = [];
 
  responsedata: any;
  leadbank_list: any;
  
  
  schedule_remarks: string | undefined;
  leadbank_name: string | undefined;
  
  totallist: any[] = [];
  isCollapsed = false;
  public isOpen = true;
  assigned_leads: any;
  Lapsed_Leads: any;
  Longest_Leads: any;
  internal_notes: any;
  reactiveFormfollow!: FormGroup;
  //reactiveFormSchedule!: FormGroup;
  reactiveFormTransfer!: FormGroup;

  selectedItems: string[] = [];
  assignlist: string[] = [];
  ScheduleType = [
    { type: 'Call Log', },
    { type: 'Meeting', },
    { type: 'Mail Log', },
  ];
  teamname:any;
  transfer: ITransfer = {
    team_name: '',
    team_member: '',
    schedule_date: '',
    schedule_time: '',
    schedule_type: '',
    schedule_remarks: ''
  };
  CurObj: ICampaign = new ICampaign();
  selection = new SelectionModel<ICampaign>(true, []);
  pick: Array<any> = [];
  assign_user: any;
  parameterValue1: any;
  employee_list: any;
  teamname_list: any;

  constructor(private formBuilder: FormBuilder, private ToastrService: ToastrService, public service: SocketService,private route:Router,
     private NgxSpinnerService: NgxSpinnerService) {
    
  }
  ngOnInit(): void {
    this.GetUpcomingManagerSummary();
    this.GetMarketingManagerSummary();
    this.reactiveFormTransfer = new FormGroup({

      team_name: new FormControl(this.transfer.team_name, [
        Validators.required,

      ]),
      team_member: new FormControl(this.transfer.team_member, [
        Validators.required,

      ]),




    });
    
  }
//// Summary Grid//////
GetUpcomingManagerSummary() {
  this.NgxSpinnerService.show();
  var url = 'Marketingmanager/GetUpcomingManagerSummary'
  this.service.get(url).subscribe((result: any) => {
    $('#upcoming').DataTable().destroy();
    this.responsedata = result;
    this.upcoming = this.responsedata.upcoming;
    this.NgxSpinnerService.hide();
    //console.log(this.source_list)
    setTimeout(() => {
      $('#upcoming').DataTable();
    }, 1);
  });
}


  popmodal(parameter: string, parameter1: string) {

    this.schedule_remarks = parameter;
    this.leadbank_name = parameter1;
  }
  //360//
  Onopen(param1: any, param2: any) {
    const secretKey = 'storyboarderp';
    const lspage1 = "MM-Upcoming";
    const lspage = AES.encrypt(lspage1, secretKey).toString();
    console.log(param1);
    console.log(param2);
    const leadbank_gid = AES.encrypt(param1, secretKey).toString();
    const lead2campaign_gid = AES.encrypt(param2, secretKey).toString();
    this.route.navigate(['/crm/CrmTrn360view', leadbank_gid, lead2campaign_gid, lspage]);
  }
//Tiles count//
GetMarketingManagerSummary(){
  var url = 'MarketingManager/GetMarketingManagerSummary'
  this.service.get(url).subscribe((result: any) => {
    $('#countlist').DataTable().destroy();
    this.responsedata = result;
    this.countlist = this.responsedata.marketingmanager_lists;
    //console.log(this.entity_list)
    setTimeout(() => {
      $('#countlist').DataTable();
    }, 1);
  });

}
//Schedule & Transfer//
get team_name() {
  return this.reactiveFormTransfer.get('team_name')!;
}
get team_member() {
  return this.reactiveFormTransfer.get('team_member')!;
}
get schedule_type() {
  return this.reactiveFormfollow.get('schedule_type')!;
}
get schedule_date() {
  return this.reactiveFormfollow.get('schedule_date')!;
}
get schedule_time() {
  return this.reactiveFormfollow.get('schedule_time')!;
}
//**schedule log popup**//
openModallog3(parameter: string) {
  this.parameterValue1 = parameter
  this.reactiveFormfollow.get("leadbank_gid")?.setValue(this.parameterValue1.leadbank_gid);    
  this.reactiveFormfollow.get("lead2campaign_gid")?.setValue(this.parameterValue1.lead2campaign_gid);
  this.reactiveFormfollow.get("assignedto_gid")?.setValue(this.parameterValue1.assignedto_gid);
  this.reactiveFormfollow.get("leadbank_name")?.setValue(this.parameterValue1.leadbank_name);
  this.leadbank_name = this.parameterValue1.leadbank_name;
}
//**Transfer log popup**//
openModallog4(parameter: string) {
  this.parameterValue1 = parameter
  this.reactiveFormTransfer.get("leadbank_gid")?.setValue(this.parameterValue1.leadbank_gid);    
  this.reactiveFormTransfer.get("lead2campaign_gid")?.setValue(this.parameterValue1.lead2campaign_gid);
  this.reactiveFormTransfer.get("assignedto_gid")?.setValue(this.parameterValue1.assignedto_gid);
  this.reactiveFormTransfer.get("leadbank_name")?.setValue(this.parameterValue1.leadbank_name);
  this.leadbank_name = this.parameterValue1.leadbank_name;
}

//Schedule submit//
onsubmitschedule() {
this.NgxSpinnerService.show();
// this.reactiveFormfollow.value.leadbank_gid;
// this.reactiveFormfollow.value.assignedto_gid;
console.log(this.reactiveFormfollow.value);
if (this.reactiveFormfollow) {
console.log("Schedule Submit event is clicked");
console.log(this.reactiveFormfollow.value);
//this.reactiveFormSchedule.value;

  var url1 = 'MarketingManager/PostManagerSchedule'
  this.service.post(url1, this.reactiveFormfollow.value).subscribe((result: any) => {
    console.log(this.reactiveFormfollow.value);
    if (result.status == false) {
      window.location.reload()
      this.ToastrService.warning(result.message)
      this.NgxSpinnerService.hide();
      this.reactiveFormfollow.reset();
    }
    else {
      this.reactiveFormfollow.get("schedule_date")?.setValue(null);
      this.reactiveFormfollow.get("schedule_time")?.setValue(null);
      window.location.reload()
      this.ToastrService.success(result.message)
      this.NgxSpinnerService.hide();
      this.reactiveFormfollow.reset();
    }
    this.reactiveFormfollow.reset();
  });
}
else{
  console.log("Form is not valid");
  return;
}
}
//Transfer submit//
OnTransfer() {
  this.NgxSpinnerService.show();
  console.log(this.reactiveFormTransfer.value);
    var url1 = 'MarketingManager/PostMoveToTransfer'
    this.service.post(url1,this.reactiveFormTransfer.value ).pipe().subscribe((result: any) => {
      if (result.status == false) {
        this.ToastrService.warning('Error While Lead  Transfer')
        this.NgxSpinnerService.hide();
      }
      else {
        this.ToastrService.success('Lead Transfer Successfully')
        this.NgxSpinnerService.hide();
        window.location.reload();
      }
    });
}
//Ends here//
oncloseschedule() {
  this.reactiveFormfollow.reset();
  }
  onclosetransfer() {
  this.reactiveFormTransfer.reset();
  }
  //Delete or Move to Drop//
  OnBin(gid: string) {
    this.reactiveFormfollow.value.leadbank_gid= gid;
    console.log(this.reactiveFormfollow.value);
    
    this.NgxSpinnerService.show();
      var url1 = 'MarketingManager/GetCampaignMoveToBin'
      this.service.post(url1, this.reactiveFormfollow.value).subscribe((result: any) => {
        if (result.status == false) {
          this.ToastrService.warning('Error While Lead Moved to MyBin')
          this.NgxSpinnerService.hide();

        }
        else {
          this.ToastrService.success('Lead Moved to MyBin Successfully')
          this.NgxSpinnerService.hide();
          window.location.reload();
        }
      });
  }


}
