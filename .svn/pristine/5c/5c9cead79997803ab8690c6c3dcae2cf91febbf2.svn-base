using System;
using System.Collections.Generic;
using System.Linq;
using ems.hrm.Models;
using ems.utilities.Functions;
using System.Data;
using System.Configuration;
using System.Data.Odbc;

using System.IO;
using System.Web;
using OfficeOpenXml;
using System.Data.OleDb;
using System.Text.RegularExpressions;
using System.Globalization;
using MySql.Data.MySqlClient;
using static OfficeOpenXml.ExcelErrorValue;
using Microsoft.SqlServer.Server;

namespace ems.hrm.DataAccess
{
    public class DaHrmTrnAttendanceroll
    {
        dbconn objdbconn = new dbconn();
        cmnfunctions objcmnfunctions = new cmnfunctions();
        string msSQL = string.Empty;
        string msSQL1 = string.Empty;
        OdbcDataReader objMySqlDataReader;
        DataTable dt_datatable, objtbl;
        int mnResult, mnResult1, importcount;
        string lsleavegrade_code, lsleavegrade_name, lsattendance_startdate, lsattendance_enddate, lsleavetype_gid, lsleavetype_name, lstotal_leavecount, lsavailable_leavecount, lsleave_limit, lsholidaygrade_gid, lsholiday_gid, lsholiday_date;
        string msUserGid, msEmployeeGID, msBiometricGID, msGetemployeetype, msTemporaryAddressGetGID, msPermanentAddressGetGID, usercode, lsuser_gid, lsemployee_gid, lsuser_code, lscountry_gid2, lscountry_gid, msGetGIDN;
        HttpPostedFile httpPostedFile;
        string lstemcountry_gid, msdocument_gid, lspcountry_gid, lsentity_gid, lsdepartment_gid, lsbranch_gid, uppercasedbvalue, lsdesignation_gid;
        int ErrorCount;


        public void DaGetEmployeeAttendanceSummary(string user_gid, MdlHrmTrnAttendanceroll values, string date)
        {
            try
            {
                if (date == null)
                {
                    date = DateTime.Now.ToString("yyyy-MM-dd");
                }
                else
                {
                    // Parse and format the date string
                    if (DateTime.TryParseExact(date, "dd-MM-yyyy", CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime parsedDate))
                    {
                        date = parsedDate.ToString("yyyy-MM-dd");
                    }
                    else
                    {
                        // Handle invalid date format
                        date = DateTime.Now.ToString("yyyy-MM-dd");
                    }
                }



                msSQL = " select /*+ MAX_EXECUTION_TIME(300000) */ a.employee_gid,b.user_code,concat(b.user_firstname,' ',b.user_lastname) As empname,f.grace_time as grace," +
                " f.employee_attendance as emp_status," +
                " cast(concat(attendance_date,' ',sec_to_time((time_to_sec(login_time)))) as datetime) as login_time," +
                " cast(concat(attendance_date,' ',sec_to_time((time_to_sec(lunch_in)))) as datetime) as lunch_in," +
                " cast(concat(attendance_date,' ',sec_to_time((time_to_sec(lunch_out)))) as datetime) as lunch_out," +
                " cast(concat(attendance_date,' ',sec_to_time((time_to_sec(logout_time)))) as datetime) as logout_time," +
                " cast(concat(attendance_date,' ',sec_to_time((time_to_sec(OT_in)))) as datetime) as OT_in," +
                " cast(concat(attendance_date,' ',sec_to_time((time_to_sec(OT_out)))) as datetime) as OT_out," +
                " cast(concat(attendance_date,' ',sec_to_time((time_to_sec(OT_duration)))) as datetime) as OT_duration," +
                " (Select p.permission_fromhours from hrm_trn_tpermission p" +
                " where p.employee_gid=a.employee_gid and p.permission_date='" + date + "') as permission_fromhours," +
                " (Select p.permission_frommins from hrm_trn_tpermission p where p.employee_gid=a.employee_gid" +
                " and p.permission_date='" + date + "') as permission_frommins," +
                " (Select p.permission_tohours from hrm_trn_tpermission p where p.employee_gid=a.employee_gid" +
                " and p.permission_date='" + date + "') as permission_tohours," +
                " (Select p.permission_tomins from hrm_trn_tpermission p where p.employee_gid=a.employee_gid" +
                " and p.permission_date='" + date + "') as permission_tomins" +
                " from hrm_mst_temployee a" +
                " inner join adm_mst_tuser b on a.user_gid=b.user_gid" +
                " inner join hrm_trn_tattendance f on a.employee_gid=f.employee_gid" +
                " inner join hrm_trn_temployeetypedtl d on a.employee_gid=d.employee_gid" +
                " left join hrm_mst_tsectionassign2employee i on i.employee_gid=a.employee_gid" +
                " where  f.shift_date='" + date + "'" +
                " and a.attendance_flag='Y' and b.user_status='Y'";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getModuleList = new List<employeeattendace_list1>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dt in dt_datatable.Rows)
                    {
                        getModuleList.Add(new employeeattendace_list1
                        {

                            user_code = dt["user_code"].ToString(),
                            empname = dt["empname"].ToString(),
                            emp_status = dt["emp_status"].ToString(),
                            login_time = dt["login_time"].ToString(),
                            logout_time = dt["logout_time"].ToString(),
                            lunch_in = dt["lunch_in"].ToString(),
                            OT_in = dt["OT_in"].ToString(),
                            lunch_out = dt["lunch_out"].ToString(),
                            OT_out = dt["OT_out"].ToString(),

                        });
                        values.employeeattendace_list1 = getModuleList;
                    }
                }
                dt_datatable.Dispose();
            }
            catch (Exception ex)
            {
                values.status = false;

                objcmnfunctions.LogForAudit("*******Date*****" + DateTime.Now.ToString("yyyy - MM - dd HH: mm:ss") + "***********" + $"DataAccess: {System.Reflection.MethodBase.GetCurrentMethod().Name}" + "***********" + ex.Message.ToString() +
                 "***********" + ex.Message.ToString() + "*****Query****" + msSQL + "*******Apiref********", "ErrorLog/HR/ " + "Log" + DateTime.Now.ToString("yyyy - MM - dd HH") + ".txt");
            }
        }
        public void DaGetBranch(MdlHrmTrnAttendanceroll values)
        {
            try
            {

                msSQL = " Select branch_name,branch_gid  " +
                    " from hrm_mst_tbranch ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getModuleList = new List<GetBranch1>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dt in dt_datatable.Rows)
                    {
                        getModuleList.Add(new GetBranch1
                        {
                            branch_name = dt["branch_name"].ToString(),
                            branch_gid = dt["branch_gid"].ToString(),
                        });
                        values.GetBranch1 = getModuleList;
                    }
                }
                dt_datatable.Dispose();
            }
            catch (Exception ex)
            {
                values.status = false;

                objcmnfunctions.LogForAudit("*******Date*****" + DateTime.Now.ToString("yyyy - MM - dd HH: mm:ss") + "***********" + $"DataAccess: {System.Reflection.MethodBase.GetCurrentMethod().Name}" + "***********" + ex.Message.ToString() +
                 "***********" + ex.Message.ToString() + "*****Query****" + msSQL + "*******Apiref********", "ErrorLog/HR/ " + "Log" + DateTime.Now.ToString("yyyy - MM - dd HH") + ".txt");
            }

        }

        public void GetDepartment(string branch_gid, MdlHrmTrnAttendanceroll values)
        {
            try
            {

                if (branch_gid != "all")
                {
                    msSQL = "select distinct a.department_gid,a.department_name from hrm_mst_tdepartment a " +
                            "inner join hrm_mst_temployee b on a.department_gid = b.department_gid " +
                            "inner join hrm_mst_tbranch c on b.branch_gid = c.branch_gid " +
                            "where c.branch_gid ='" + branch_gid + "' ";
                }
                else
                {
                    msSQL = "select distinct a.department_gid,a.department_name from hrm_mst_tdepartment a " +
                            "inner join hrm_mst_temployee b on a.department_gid = b.department_gid " +
                            "inner join hrm_mst_tbranch c on b.branch_gid = c.branch_gid ";
                }
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getModuleList = new List<GetDepartment1>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dt in dt_datatable.Rows)
                    {
                        getModuleList.Add(new GetDepartment1
                        {
                            department_gid = dt["department_gid"].ToString(),
                            department_name = dt["department_name"].ToString(),
                        });
                        values.GetDepartment1 = getModuleList;
                    }
                }
                dt_datatable.Dispose();
            }
            catch (Exception ex)
            {
                values.status = false;

                objcmnfunctions.LogForAudit("*******Date*****" + DateTime.Now.ToString("yyyy - MM - dd HH: mm:ss") + "***********" + $"DataAccess: {System.Reflection.MethodBase.GetCurrentMethod().Name}" + "***********" + ex.Message.ToString() +
                 "***********" + ex.Message.ToString() + "*****Query****" + msSQL + "*******Apiref********", "ErrorLog/HR/ " + "Log" + DateTime.Now.ToString("yyyy - MM - dd HH") + ".txt");
            }

        }

        public void GetShift(string branch_gid, MdlHrmTrnAttendanceroll values)
        {
            try
            {

                if (branch_gid != "all")
                {
                    msSQL = " select a.shifttype_name,a.shifttype_gid from hrm_mst_tshifttype a " +
                            " inner join hrm_mst_tshifttype2branch b on a.shifttype_gid=b.shifttype_gid "+
                            " where b.branch_gid ='" + branch_gid + "' ";
                }
                else
                {
                    msSQL = " select a.shifttype_name,a.shifttype_gid from hrm_mst_tshifttype a " +
                            " inner join hrm_mst_tshifttype2branch b on a.shifttype_gid=b.shifttype_gid ";
                }
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getModuleList = new List<shiftList>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dt in dt_datatable.Rows)
                    {
                        getModuleList.Add(new shiftList
                        {
                            shift_gid = dt["shifttype_gid"].ToString(),
                            shift_name = dt["shifttype_name"].ToString(),
                        });
                        values.shiftList = getModuleList;
                    }
                }
                dt_datatable.Dispose();
            }
            catch (Exception ex)
            {
                values.status = false;

                objcmnfunctions.LogForAudit("*******Date*****" + DateTime.Now.ToString("yyyy - MM - dd HH: mm:ss") + "***********" + $"DataAccess: {System.Reflection.MethodBase.GetCurrentMethod().Name}" + "***********" + ex.Message.ToString() +
                 "***********" + ex.Message.ToString() + "*****Query****" + msSQL + "*******Apiref********", "ErrorLog/HR/ " + "Log" + DateTime.Now.ToString("yyyy - MM - dd HH") + ".txt");
            }

        }


    }
}