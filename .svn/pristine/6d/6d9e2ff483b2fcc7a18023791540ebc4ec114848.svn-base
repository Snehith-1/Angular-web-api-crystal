
import { Component } from '@angular/core';
import { Router } from '@angular/router';
import { SocketService } from 'src/app/ems.utilities/services/socket.service';
import {
  ApexNonAxisChartSeries,
  ApexResponsive,
  ApexChart
} from "ng-apexcharts";
import { concat } from 'rxjs';

export type ChartOptions1 = {
  series: ApexNonAxisChartSeries;
  chart: ApexChart;
  responsive: ApexResponsive[];
  labels: any;
  DashboardCount_List:any;
  
  
};

@Component({
  selector: 'app-smr-dashboard',
  templateUrl: './smr-dashboard.component.html',
  styleUrls: ['./smr-dashboard.component.scss']
})

export class SmrDashboardComponent {
  GetOrderForLastSixMonths_List :any;
  GetOrderForLastSixMonths_List1 :any;
  GetMonthSalesReportCount_list :any;
  GetDaySalesReportCount_List :any;
  GetWeekSalesReportCount_List :any;
  GetMonthSalesReportCount_List :any;
  GetSalesOrderCount_List: any[] = [];
  total_so :any;
  responsedata: any;
  chartOptions: any;
  parameter: any;
  parameterValue: any;
  Date: string;
  getData: any;
  total_payment:any;
  todaytask_count : any;
  pending_So :any;
  approved_so :any;
  advanced_paid :any;
  rejected_so :any;
  invoice_raised :any
  totalinvoice :any;
  delivery_done_partial :any;
  delivery_completed :any;
  approvalpendinginnvoice :any;
  payment_pending :any;
  approval_pending :any;
  quotation_canceled : any;
  quotation_status :any;
  total_quotation :any;
  completed_quotation: any;
  total_quotation1 :number = 0;
  quotation_canceled1 :number = 0;
  so_amended :any;
  quotation_amended:any;
  work_in_progress :any;
  payment_don_partial :any;
  compelted_payment :any;


  today_total_so:any;
  today_total_do:any;
  today_total_invoice:any;
  today_total_payment:any;
  today_invoice_amount:any;
  today_payment_amount:any;
  today_outstanding_amount:any;

  yest_total_so:any;
  yest_total_do:any;
  yest_total_invoice:any;
  yest_total_payment:any;
  yest_invoice_amount:any;
  yest_payment_amount:any;
  yest_outstanding_amount:any;

  cw_total_so:any;
  cw_total_do:any;
  cw_total_invoice:any;
  cw_total_payment:any;
  cw_invoice_amount:any;
  cw_payment_amount:any;
  cw_outstanding_amount:any;

  lw_total_so: any;
  lw_total_do:any;
  lw_total_invoice:any;
  lw_total_payment:any;
  lw_invoice_amount:any;
  lw_payment_amount:any;
  lw_outstanding_amount:any;

  cm_total_so:any;
  cm_total_do:any;
  cm_total_invoice:any;
  cm_total_payment:any;
  cm_invoice_amount:any;
  cm_payment_amount:any;
  cm_outstanding_amount:any;

  lm_total_so: any;
  lm_total_do:any;
  lm_total_invoice:any;
  lm_total_payment:any;
  lm_invoice_amount:any;
  lm_payment_amount:any;
  lm_outstanding_amount:any;

  cy_total_so:any;
  cy_total_do:any;
  cy_total_invoice:any;
  cy_total_payment:any;
  cy_invoice_amount:any;
  cy_payment_amount:any;
  cy_outstanding_amount:any;

  ly_total_so: any;
  ly_total_do:any;
  ly_total_invoice:any;
  ly_total_payment:any;
  ly_invoice_amount:any;
  ly_payment_amount:any;
  ly_outstanding_amount:any;


  mtd_over_due_payment :any;
  mtd_over_due_payment_amount :any;
  mtd_over_due_invoice_amount :any;
  mtd_over_due_invoice :any;
  ytd_over_due_payment :any;
  ytd_over_due_payment_amount :any;
  ytd_over_due_invoice_amount :any;
  ytd_over_due_invoice :any;
  mtd_invoice:any;
  mtd_payment:any;
 ytd_invoice:any;
  ytd_payment:any;
  constructor(private router: Router, private service: SocketService) {
    this.Date = new Date().toString();
    SmrDashboardComponent.constructor(); {
      setInterval(() => {
        this.Date = new Date().toString();
      }, 1000);
   
    }

    var url  = 'SmrDashboard/GetSalesOrderCount';
    this.service.get(url).subscribe((result:any) => {
    this.responsedata = result;
    debugger;
    console.log(this.GetSalesOrderCount_List)
    this.GetSalesOrderCount_List = this.responsedata.GetSalesOrderCount_List;
    this.total_quotation=this.GetSalesOrderCount_List[0].total_quotation;    
    this.quotation_canceled=this.GetSalesOrderCount_List[0].quotation_completed;  
    this.quotation_amended = this.GetSalesOrderCount_List[0].quotation_canceled;
    this.total_quotation1 =this.total_quotation;
    this.quotation_canceled1=this.quotation_canceled;
    this.completed_quotation=this.total_quotation1 - this.quotation_canceled1;
    this.total_so=this.GetSalesOrderCount_List[0].total_so
    this.approved_so=this.GetSalesOrderCount_List[0].approved_so
    this.pending_So=this.GetSalesOrderCount_List[0].pending_So
    this.rejected_so=this.GetSalesOrderCount_List[0].rejected_so
    this.so_amended=this.GetSalesOrderCount_List[0].so_amended
    this.totalinvoice=this.GetSalesOrderCount_List[0].totalinvoice
    this.invoice_raised=this.GetSalesOrderCount_List[0].invoice_raised
    this.invoice_raised=this.GetSalesOrderCount_List[0].invoice_raised
    this.delivery_completed=this.GetSalesOrderCount_List[0].delivery_completed
    this.delivery_done_partial=this.GetSalesOrderCount_List[0].delivery_done_partial
    this.advanced_paid=this.GetSalesOrderCount_List[0].advanced_paid
    this.payment_pending=this.GetSalesOrderCount_List[0].payment_pending
    this.total_payment=this.GetSalesOrderCount_List[0].total_payment
    this.payment_don_partial=this.GetSalesOrderCount_List[0].payment_don_partial
    this.compelted_payment=this.GetSalesOrderCount_List[0].compelted_payment
    this.approvalpendinginnvoice=this.GetSalesOrderCount_List[0].approvalpendinginnvoice
    this.approval_pending=this.GetSalesOrderCount_List[0].approval_pending
  

    console.log(this.GetSalesOrderCount_List,'testdata');
    });
    
  }

  ngOnInit() {

    this.chartOptions = getChartOptions(350);
    this.GetDaySummary ();
    this.GetWeekSummary();
    this.GetMonthSummary();
    this.GetYearSummary();
    this.GetYTDCounts();
    this.GetMTDCounts();
    setInterval(() => {
      this.Date = new Date().toString();
    }, 1000);
  }
  
  GetYearSummary()
  {
    var url = 'SmrRptTodaysSalesReport/GetYearSalesReportCount'
    this.service.get(url).subscribe((result: any) => {
      console.log(result);
      this.cy_total_so = result.cy_total_so;
      this.cy_total_do = result.cy_total_do;
      this.cy_total_invoice = result.cy_total_invoice;
      this.cy_total_payment = result.cy_total_payment;
      this.cy_invoice_amount = result.cy_invoice_amount;
      this.cy_payment_amount = result.cy_payment_amount;
      this.cy_outstanding_amount = result.cy_outstanding_amount; 

      this.ly_total_so = result.ly_total_so;
      this.ly_total_do = result.ly_total_do;
      this.ly_total_invoice = result.ly_total_invoice;
      this.ly_total_payment = result.ly_total_payment;
      this.ly_invoice_amount = result.ly_invoice_amount;
      this.ly_payment_amount = result.ly_payment_amount;
      this.ly_outstanding_amount = result.ly_outstanding_amount; 
    })
  }
GetMonthSummary()
{
  var url = 'SmrRptTodaysSalesReport/GetMonthSalesReportCount'
  this.service.get(url).subscribe((result: any) => {
    console.log(result);
    this.cm_total_so = result.cm_total_so;
    this.cm_total_do = result.cm_total_do;
    this.cm_total_invoice = result.cm_total_invoice;
    this.cm_total_payment = result.cm_total_payment;
    this.cm_invoice_amount = result.cm_invoice_amount;
    this.cm_payment_amount = result.cm_payment_amount;
    this.cm_outstanding_amount = result.cm_outstanding_amount;
  
    this.lm_total_so = result.lm_total_so;
    this.lm_total_do = result.lm_total_do;
    this.lm_total_invoice = result.lm_total_invoice;
    this.lm_total_payment = result.lm_total_payment;
    this.lm_invoice_amount = result.lm_invoice_amount;
    this.lm_payment_amount = result.lm_payment_amount;
    this.lm_outstanding_amount = result.lm_outstanding_amount;
    
  })
}
  GetWeekSummary()
  {
    var url = 'SmrRptTodaysSalesReport/GetWeekSalesReportCount'
    this.service.get(url).subscribe((result: any) => {
      console.log(result);
      this.cw_total_so = result.cw_total_so;
      this.cw_total_do = result.cw_total_do;
      
      this.cw_total_invoice = result.cw_total_invoice;
      this.cw_total_payment = result.cw_total_payment;
      this.cw_invoice_amount = result.cw_invoice_amount;
      this.cw_payment_amount = result.cw_payment_amount;
      this.cw_outstanding_amount = result.cw_outstanding_amount;
     
      this.lw_total_so = result.lw_total_so;
      this.lw_total_do = result.lw_total_do;
      this.lw_total_invoice = result.lw_total_invoice;
      this.lw_total_payment = result.lw_total_payment;
      this.lw_invoice_amount = result.lw_invoice_amount;
      this.lw_payment_amount = result.lw_payment_amount;
      this.lw_outstanding_amount = result.lw_outstanding_amount;
      
    })
  }
  GetDaySummary()

 {
 
  var url = 'SmrRptTodaysSalesReport/GetDaySalesReportCount'
  this.service.get(url).subscribe((result: any) => {
    console.log(result);
    this.today_total_so = result.today_total_so;
    this.today_total_do = result.today_total_do;
    this.today_total_invoice = result.today_total_invoice;
    this.today_total_payment = result.today_total_payment;
    this.today_invoice_amount = result.today_invoice_amount;
    
    this.today_payment_amount = result.today_payment_amount;
    this.today_outstanding_amount = result.today_outstanding_amount;
  
    this.yest_total_so = result.yest_total_so;
    this.yest_total_do = result.yest_total_do;
    this.yest_total_invoice = result.yest_total_invoice;
    this.yest_total_payment = result.yest_total_payment;
    this.yest_invoice_amount = result.yest_invoice_amount;
    this.yest_payment_amount = result.yest_payment_amount;
    this.yest_outstanding_amount = result.yest_outstanding_amount;
    
  })
 
  

  
}
GetMTDCounts()

 {
 
  var url = 'SmrDashboard/GetMTDCounts'
  this.service.get(url).subscribe((result: any) => {
    console.log(result);
   
 this.mtd_invoice = result.mtd_over_due_invoice + ' / ' + result.mtd_over_due_invoice_amount ;
 
  this.mtd_payment  = result.mtd_over_due_payment + ' / ' + result.mtd_over_due_payment_amount ;
 
  })
 
  

  
}

GetYTDCounts()

 {
 
  var url = 'SmrDashboard/GetYTDCounts'
  this.service.get(url).subscribe((result: any) => {
    console.log(result);
    
    this.ytd_invoice = result.ytd_over_due_invoice + ' / ' + result.ytd_over_due_invoice_amount ;
    this.ytd_payment  = result.ytd_over_due_payment + ' / ' + result.ytd_over_due_payment_amount ;
  })
 
  

  
}


 
  
}




function getChartOptions(height: number) {
  const labelColor = '#000'; 
  const borderColor = '#e6ccb2';
  const secondaryColor = '#f1841e'
  const baseColor1 = '#047beb';
  const secondaryColor1 = '#e63423'
  const baseColor = '#9D76C1';  

  return {
    series: [

      
      {
        name: 'Sales Order  Amount',
        data: [50303, 60234, 70577, 80980, 60098, 50789, 70800, 60454,34456,90856,78809,45060,],
      },
    ],
    chart: {
      fontFamily: 'inherit',
      type: 'bar',
      height: height,
      toolbar: {
        show: false,
      },
    },
    plotOptions: {
      bar: {
        horizontal: false,
        columnWidth: '40%',
        borderRadius: 3,
      },
    },
    legend: {
      show: false,
    },
    dataLabels: {
      enabled: false,
    },
    stroke: {
      show: true,
      width: 2,
      colors: ['transparent'],
    },
    xaxis: {
      categories: [ 'Jun','Feb','Mar','Apl','May','Jun', 'Jul', 'Aug', 'Sep', 'Oct','Nov','Dec'],
      axisBorder: {
        show: false,
      },
      axisTicks: {
        show: false,
      },
      labels: {
        style: {
          colors: labelColor,
          fontSize: '12px',
        },
      },
    },
    yaxis: {
      labels: {
        style: {
          colors: labelColor,
          fontSize: '12px',
        },
      },
    },
    fill: {
      type: 'solid',
    },
    states: {
      normal: {
        filter: {
          type: 'none',
          value: 0,
        },
      },
      hover: {
        filter: {
          type: 'none',
          value: 0,
        },
      },
      active: {
        allowMultipleDataPointsSelection: false,
        filter: {
          type: 'none',
          value: 0,
        },
      },
    },

    colors: [baseColor, secondaryColor,baseColor1, secondaryColor1],
    grid: {
      padding: {
        top: 10,
      },
      borderColor: borderColor,
      strokeDashArray: 4,
      yaxis: {
        lines: {
          show: true,
        },
      },
    },
  };

}
