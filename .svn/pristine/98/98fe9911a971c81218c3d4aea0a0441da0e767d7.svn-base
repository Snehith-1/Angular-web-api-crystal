import { Component } from '@angular/core';
import { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';
import { SocketService } from 'src/app/ems.utilities/services/socket.service';
import { ToastrService } from 'ngx-toastr';
import { NgxSpinnerService } from 'ngx-spinner';
interface ICampaingService {
  base_url: string;
  whatsapp_accesstoken: string;
  workspace_id: string;
  access_token_edit: string;
  base_url_edit: string;
  whatsapp_id: string
}
interface IShopifyService {
  shopify_accesstoken: string;
  shopify_store_name: string;
  store_month_year: string;
  shopify_accesstokenedit: string;
  shopify_store_nameedit: string;
  store_month_yearedit: string;
}
interface IEmailService {
  mail_access_token: string;
  mail_base_url: string;
  email_id: string;

}
@Component({
  selector: 'app-crm-smm-campaignsettings',
  templateUrl: './crm-smm-campaignsettings.component.html',
  styleUrls: ['./crm-smm-campaignsettings.component.scss']
})
export class CrmSmmCampaignsettingsComponent {
  services: any;
  parameterValue: any;
  leadbank_list: any[] = [];
  parameterValue1: any;
  reactiveFormShopify!: FormGroup;
  reactiveForm: any;
  reactiveFormEmail!: FormGroup;
  reactiveFormWhatsapp!: FormGroup;
  campaignserv_list: any[] = [];
  campaignser_list: any[] = [];
  campaignservice_list: any[] = [];
  shopifycampaignservice_list:any[]=[];
  mailtemplateview_list: any;
  access_token: any;
  EmailService!:IEmailService;
  responsedata: any;
  CampaingService!: ICampaingService;
  ShopifyService!:IShopifyService;
  datas: any;
  constructor(private formBuilder: FormBuilder, private NgxSpinnerService: NgxSpinnerService, private ToastrService: ToastrService, public service: SocketService) {
    this.CampaingService = {} as ICampaingService;
    this.ShopifyService = {} as IShopifyService;
    this.EmailService = {} as IEmailService;
  }

  ngOnInit(): void {
    // Form values for Add popup/////
    this.GetWhatsappSummary();
    this.GetShopifySummary();
    this.GetMailSummary();
    this.reactiveFormShopify = new FormGroup({
      shopify_accesstoken: new FormControl(this.ShopifyService.shopify_accesstoken, [
        Validators.required,
      ]),
      shopify_store_name: new FormControl(this.ShopifyService.shopify_store_name, [
        Validators.required,
      ]),
      store_month_year: new FormControl(this.ShopifyService.store_month_year, [
        Validators.required,
      ]),
      shopify_id: new FormControl()
    });
    this.reactiveFormWhatsapp = new FormGroup({

      whatsapp_accesstoken: new FormControl(this.CampaingService.whatsapp_accesstoken, [

        Validators.required

      ]),

      base_url: new FormControl(this.CampaingService.base_url, [
        Validators.required
      ]),
      workspace_id: new FormControl(this.CampaingService.workspace_id, [

        Validators.required
      ]),
      whatsapp_id: new FormControl()

    });
    this.reactiveFormEmail = new FormGroup({
      mail_access_token: new FormControl(this.EmailService.mail_access_token, [
        Validators.required,
      ]),
      mail_base_url: new FormControl(this.EmailService.mail_base_url, [
        Validators.required,
      ]),
      email_id: new FormControl()
    });

  }

  onemailupdate() {
   
    if (this.reactiveFormEmail.status === 'VALID') {
      this.NgxSpinnerService.show();
      var url = 'CampaignService/UpdateEmailService'
      this.service.post(url, this.reactiveFormEmail.value).subscribe((result: any) => {

        if (result.status == false) {
          this.NgxSpinnerService.hide();
          this.ToastrService.warning(result.message)
          this.GetMailSummary();
        }
        else {
         
          this.NgxSpinnerService.hide();
          this.ToastrService.success(result.message)
          this.GetMailSummary();

        }

      });

    }
    else {
      this.ToastrService.warning('Kindly Fill All Mandatory Fields !! ')
    }
    
  }


  get shopify_accesstoken() {
    return this.reactiveFormShopify.get('shopify_accesstoken')!;
  }
  get shopify_store_name() {
    return this.reactiveFormShopify.get('shopify_store_name')!;
  }
  get store_month_year() {
    return this.reactiveFormShopify.get('store_month_year')!;
  }
  get base_url() {
    return this.reactiveFormWhatsapp.get('base_url')!;
  }
get workspace_id() {
    return this.reactiveFormWhatsapp.get('workspace_id')!;
  }
get whatsapp_accesstoken() {
    return this.reactiveFormWhatsapp.get('whatsapp_accesstoken')!;
  }
  get mail_access_token() {
    return this.reactiveFormEmail.get('mail_access_token')!;
  }
get mail_base_url() {
    return this.reactiveFormEmail.get('mail_base_url')!;
  }
  onshopifyupdate(){
   
    if (this.reactiveFormShopify.status === 'VALID') {
      this.NgxSpinnerService.show();
      var url = 'CampaignService/UpdateShopifyService'
      this.service.post(url, this.reactiveFormShopify.value).subscribe((result: any) => {

        if (result.status == false) {
          this.NgxSpinnerService.hide();
          this.ToastrService.warning(result.message)
          this.GetShopifySummary();
        }
        else {
         
          this.NgxSpinnerService.hide();
          this.ToastrService.success(result.message)
          this.GetShopifySummary();

        }

      });

    }
    else {
      this.ToastrService.warning('Kindly Fill All Mandatory Fields !! ')
    }


  
  }
  onwhatsappupdate(){ 
    if (this.reactiveFormWhatsapp.status === 'VALID') {
      this.NgxSpinnerService.show();
      var url = 'CampaignService/UpdateWhatsappService'
      this.service.post(url, this.reactiveFormWhatsapp.value).subscribe((result: any) => {

        if (result.status == false) {
          this.NgxSpinnerService.hide();
          this.ToastrService.warning(result.message)
          this.GetWhatsappSummary();
        }
        else {
         
          this.NgxSpinnerService.hide();
          this.ToastrService.success(result.message)
          this.GetWhatsappSummary();

        }

      });

    }
    else {
      this.ToastrService.warning('Kindly Fill All Mandatory Fields !! ')
    }
  }
  GetWhatsappSummary() {
    var api = 'CampaignService/GetWhatsappSummary'
    this.service.get(api).subscribe((result: any) => {

      this.responsedata = result;
      this.campaignservice_list = this.responsedata.campaignservice_list;
      
      this.reactiveFormWhatsapp.get("whatsapp_accesstoken")?.setValue(this.campaignservice_list[0].access_token);
      this.reactiveFormWhatsapp.get("base_url")?.setValue(this.campaignservice_list[0].base_url);
      this.reactiveFormWhatsapp.get("workspace_id")?.setValue(this.campaignservice_list[0].workspace_id);
      this.reactiveFormWhatsapp.get("whatsapp_id")?.setValue(this.campaignservice_list[0].s_no);
    });
  }

  GetShopifySummary() {
    var api = 'CampaignService/GetShopifySummary'
    this.service.get(api).subscribe((result: any) => {

      this.responsedata = result;
      this.campaignserv_list = this.responsedata.shopifycampaignservice_list;
      this.reactiveFormShopify.get("shopify_store_name")?.setValue(this.campaignserv_list[0].shopify_store_name);
      this.reactiveFormShopify.get("store_month_year")?.setValue(this.campaignserv_list[0].store_month_year);
      this.reactiveFormShopify.get("shopify_accesstoken")?.setValue(this.campaignserv_list[0].shopify_access_token);
      this.reactiveFormShopify.get("shopify_id")?.setValue(this.campaignserv_list[0].s_no);
       //console.log(this.campaignserv_list)
    });
  }

  GetMailSummary() {
    var api = 'CampaignService/GetMailSummary'
    this.service.get(api).subscribe((result: any) => {

      this.responsedata = result;
      this.campaignser_list = this.responsedata.mailcampaignservice_list;
      this.reactiveFormEmail.get("mail_access_token")?.setValue(this.campaignser_list[0].mail_access_token);
      this.reactiveFormEmail.get("mail_base_url")?.setValue(this.campaignser_list[0].mail_base_url);
      this.reactiveFormEmail.get("email_id")?.setValue(this.campaignser_list[0].s_no);
    });
  }

  GetMailView(temp_mail_gid: any) {
    this.NgxSpinnerService.show();
    var url = 'MailCampaign/MailTemplateView';

    this.service.get(url).subscribe((result: any) => {
      this.campaignservice_list = result.campaignservice_list;
      // this.access_token = this.campaignservice_list[0].access_token;
      // this.base_url = this.campaignservice_list[0].base_url
      // this.workspace_id = this.campaignservice_list[0].workspace_id;

    });
  }

}
