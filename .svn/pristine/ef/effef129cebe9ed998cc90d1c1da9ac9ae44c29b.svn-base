import { Component } from '@angular/core';
import { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { AngularEditorConfig } from '@kolkov/angular-editor';
import { SocketService } from 'src/app/ems.utilities/services/socket.service';
import { ToastrService } from 'ngx-toastr';

@Component({
  selector: 'app-pmr-trn-directpo-add',
  templateUrl: './pmr-trn-directpo-add.component.html',
  styleUrls: ['./pmr-trn-directpo-add.component.scss']
})

export class PmrTrnDirectpoAddComponent  {
  config: AngularEditorConfig = {
  editable: true,
  spellcheck: true,
   height: '25rem',
   minHeight: '5rem',
   width:'1230px',
  placeholder: 'Enter text here...',
  translate: 'no',

    defaultParagraphSeparator: 'p',

    defaultFontName: 'Arial',

   

  };

  POAddForm: FormGroup | any;
  product_list:any;
  branch_list:any;
  vendor_list:any;
  dispatch_list:any;
  currency_list:any;
  tax_list:any;
  productcode_list:any;
  productgroup_list:any;
  
  productform: FormGroup | any;
  responsedata: any;
  productunit_list:any;
  mdlProductName: any;
  mdlProductGroup:any;
  mdlProductUnit: any;
  mdlProductCode:any;
  mdlBranchName:any;
  mdlVendorName:any;
  mdlDispatchName:any;
  mdlTaxName1:any;
  mdlTaxName2:any;
  mdlTaxName3:any;
  unitprice: number = 0;
  quantity: number = 0;
  discountpercentage: number = 0;
  discountamount: number = 0;
  totalamount: number = 0;
  addoncharges: number = 0;
  POdiscountamount: number = 0;
  frieghtcharges: number = 0;
  forwardingCharges: number = 0;
  insurancecharges: number = 0;
  roundoff: number = 0;
  grandtotal: number = 0;
  taxamount1:number=0;
  taxpercentage: any;
  productdetails_list: any;
  taxamount2: number = 0;
  taxamount3: number = 0;
  producttotalamount: any;
  parameterValue: string | undefined;
  POproductlist: any;
  productnamelist: any;
  ngOnInit(): void {
    var api = 'PmrTrnPurchaseOrder/GetBranch';
    this.service.get(api).subscribe((result: any) => {
      this.responsedata = result;
      this.branch_list = this.responsedata.GetBranch;
      
    });
    var api = 'PmrTrnPurchaseOrder/GetVendor';
    this.service.get(api).subscribe((result: any) => {
      this.responsedata = result;
      this.vendor_list = this.responsedata.GetVendor;
     
    });
    var api = 'PmrTrnPurchaseOrder/GetDispatchToBranch';
    this.service.get(api).subscribe((result: any) => {
      this.responsedata = result;
      this.dispatch_list = this.responsedata.GetDispatchToBranch;
     
    });

    var api = 'PmrTrnPurchaseOrder/GetCurrency';
    this.service.get(api).subscribe((result: any) => {
      this.responsedata = result;
      this.currency_list = this.responsedata.GetCurrency;
     
    });
    var api = 'PmrTrnPurchaseOrder/GetTax';
    this.service.get(api).subscribe((result: any) => {
      this.responsedata = result;
      this.tax_list = this.responsedata.GetTax;
    
    });
    var api = 'PmrTrnPurchaseOrder/GetProductCode';
    this.service.get(api).subscribe((result: any) => {
      this.responsedata = result;
      this.productcode_list = this.responsedata.GetProductCode;
     
    });
    var api = 'PmrMstProduct/GetProductUnit';
    this.service.get(api).subscribe((result: any) => {
      this.responsedata = result;
      this.productunit_list = this.responsedata.GetProductUnit;

    });
    var api = 'PmrMstProduct/GetProductGroup';
    this.service.get(api).subscribe((result: any) => {
      this.responsedata = result;
      this.productgroup_list = this.responsedata.GetProductGroup;
      setTimeout(()=>{  

        $('#productgroup_list').DataTable();

      }, 0.1);
    });
    var api = 'PmrTrnPurchaseOrder/GetProduct';
    this.service.get(api).subscribe((result: any) => {
      this.responsedata = result;
      this.productdetails_list = this.responsedata.GetProduct;
      
      setTimeout(()=>{  

        $('#product_list').DataTable();

      }, 0.1);
    });
  }
 
  constructor (private fb: FormBuilder, private route: ActivatedRoute, private router: Router, private service: SocketService,private ToastrService: ToastrService)
    {
      this.POAddForm = new FormGroup ({
        branch: new FormControl('', Validators.required),
        branch_name: new FormControl('', Validators.required),
        dispatch_name: new FormControl('', Validators.required),
        vendor_companyname: new FormControl('', Validators.required),
        currency_code: new FormControl('', Validators.required),  
        payment_term: new FormControl('', Validators.required),
        contact_person: new FormControl('', Validators.required),
        email_address: new FormControl('', Validators.required),
        contact_number: new FormControl('', Validators.required),
        currency: new FormControl('', Validators.required),
        exchange_rate: new FormControl('', Validators.required),
        remarks: new FormControl('', Validators.required),
        Shipping_address: new FormControl('', Validators.required),
        vendor_address: new FormControl('', Validators.required),       
        vendor_fax: new FormControl('', Validators.required),
        priority_flag:new FormControl('N',Validators.required),
      })

      this.productform = new FormGroup ({
        product_code: new FormControl('', Validators.required),
        productcode: new FormControl('', Validators.required),
        productgroup: new FormControl('', Validators.required),
        productuom: new FormControl('', Validators.required),
        productname: new FormControl('', Validators.required),
        tax_name1: new FormControl('', Validators.required),
        tax_name2: new FormControl('', Validators.required),
        tax_name3: new FormControl('', Validators.required),
        remarks: new FormControl('', Validators.required),
        product_name: new FormControl('', Validators.required),
        productuom_name: new FormControl('', Validators.required),
        productgroup_name:new FormControl('', Validators.required),
        unitprice: new FormControl('', Validators.required),
        quantity: new FormControl('', Validators.required),        
        discountpercentage: new FormControl('', Validators.required),
        discountamount: new FormControl('', Validators.required),
        taxname1: new FormControl('', Validators.required),
        taxamount1: new FormControl('', Validators.required),
        taxname2: new FormControl('', Validators.required),
        taxamount2: new FormControl('', Validators.required),
        taxname3: new FormControl('', Validators.required),
        taxamount3: new FormControl('', Validators.required),
        totalamount: new FormControl('', Validators.required),
        
      })
    }

    redirecttolist(){
      this.router.navigate(['/pmr/PmrTrnPurchaseorderSummary']);
    
    }
    get Shipping_address() {
      return this.POAddForm.get('Shipping_address')!;
    }
    get vendor_address() {
      return this.POAddForm.get('vendor_address')!;
    }
    get contact_person() {
      return this.POAddForm.get('contact_person')!;
    }
    get contact_number() {
      return this.POAddForm.get('contact_number')!;
    }
    get vendor_fax() {
      return this.POAddForm.get('vendor_fax')!;
    }
    get email_address() {
      return this.POAddForm.get('email_address')!;
    }
    get product_name() {
      return this.productform.get('product_name')!;
    }
    get product_code() {
      return this.productform.get('product_code')!;
    }
    get branch_name() {
      return this.productform.get('branch_name')!;
    }
    get tax_name1() {
      return this.productform.get('tax_name1')!;
    }
    get productuom_name() {
      return this.productform.get('productuom_name')!;
    }
    get productgroup_name() {
      return this.productform.get('productgroup_name')!;
    }
    get prodnameControl() {
      return this.productform.get('productgid');
    }
    OnChangeBranch() {
      let branch_gid = this.POAddForm.get("branch_name")?.value;
       
       let param = {
        branch_gid : branch_gid
      }
        var url = 'PmrTrnPurchaseOrder/GetOnChangeBranch';
      this.service.getparams(url,param).subscribe((result:any)=>{    
        
         this.POAddForm.get("Shipping_address")?.setValue(result.GetBranch[0].address1);
         console.log(result.GetBranch[0].address1)
      });
      
    }
    OnChangeVendor()
    {
      let vendor_gid = this.POAddForm.get("vendor_companyname")?.value;
       
       let param = {
        vendor_gid : vendor_gid
      }
        var url = 'PmrTrnPurchaseOrder/GetOnChangeVendor';
      this.service.getparams(url,param).subscribe((result:any)=>{   
        this.POAddForm.get("vendor_address")?.setValue(result.GetVendor[0].address1);
        this.POAddForm.get("contact_number")?.setValue(result.GetVendor[0].contact_telephonenumber);
        this.POAddForm.get("contact_person")?.setValue(result.GetVendor[0].contactperson_name);
        this.POAddForm.get("vendor_fax")?.setValue(result.GetVendor[0].fax);
        this.POAddForm.get("email_address")?.setValue(result.GetVendor[0].email_id);
     });
    }
    OnChangeProductCode()
    {
       let product_code = this.productform.value.productcode ;
        
       let param = {
        product_code : product_code
      }
      var url = 'PmrTrnPurchaseOrder/GetOnChangeProductCode';
      this.service.getparams(url,param).subscribe((result:any)=>{   
      this.productform.get("productname")?.setValue(result.GetProductCode[0].product_name);
      this.productform.get("productuom_name")?.setValue(result.GetProductCode[0].productuom_name);
      this.productform.get("productgroup_name")?.setValue(result.GetProductCode[0].productgroup_name);   
    
     
    let product_name=this.productform.get('productname').value;
    this.mdlProductName =this.product_list.product_name;
 
    let productgroup_name=this.productform.get('product_code').value;
    this.mdlProductGroup =this.product_list.productgroup_name;

    let productuom_name=this.productform.get('product_code').value;
    this.mdlProductUnit =this.product_list.productuom_name;
    
     });

    }
    GetOnChangeProductName()
    {
      let product_gid = this.productform.value.productname.product_gid;
      console.log(product_gid)
      let param = {
        product_gid : product_gid
     }
      var url = 'PmrTrnPurchaseOrder/GetOnChangeProductName';
      this.service.getparams(url,param).subscribe((result:any)=>{   
        debugger
        console.log(result.GetProductCode[0])
      this.productform.get("productcode")?.setValue(result.GetProductCode[0].product_code);
      this.productform.get("productuom")?.setValue(result.GetProductCode[0].productuom_name);
      this.productform.get("productgroup")?.setValue(result.GetProductCode[0].productgroup_name);
 

      // let product_code=this.productform.get('productcode').value;
      // this.mdlProductCode =this.product_list.product_code;
   
      // let productgroup_name=this.productform.get('product_code').value;
      // this.mdlProductGroup =this.product_list.productgroup_name;
  
      // let productuom_name=this.productform.get('product_code').value;
      // this.mdlProductUnit =this.product_list.productuom_name;
     
     });
      
    }
    OnChangeProductGroup()
    {
      let product_gid = this.productform.get("product_gid")?.value;
      
       let param = {
        product_gid : product_gid
      }
    //   var url = 'PmrTrnPurchaseOrder/GetOnChangeProductCode';
    //   this.service.getparams(url,param).subscribe((result:any)=>{   
    //   this.productform.get("product_name")?.setValue(result.GetProductCode[0].product_name);
    //   this.productform.get("productuom_name")?.setValue(result.GetProductCode[0].productuom_name);
    //   this.productform.get("productgroup_name")?.setValue(result.GetProductCode[0].productgroup_name);
     
    //  });
      
    }
   
  
    
  
    OnChangeProductName() {
      let product_gid = this.productform.value.productname.product_gid ;
      
      let param = {
        product_gid : product_gid
     }
      var url = 'PmrTrnPurchaseOrder/GetOnChangeProductName';
      this.service.getparams(url,param).subscribe((result:any)=>{   
        this.responsedata = result;
        debugger
        console.log(this.productdetails_list[0].productgroup_name)
        this.productdetails_list = this.responsedata.Getproductonchangedetails;
        this.productform.get("productgroup_gid")?.setValue(this.productdetails_list[0].productgroup_name);
        this.productform.get("productcode")?.setValue(this.productdetails_list[0].product_code);
        // this.productform.get("hsncode")?.setValue(this.productdetails_list[0].hsn_code);
        // this.productform.get("hsndescription")?.setValue(this.productdetails_list[0].hsn_description);
        this.productform.get("productuom_gid")?.setValue(this.productdetails_list[0].productuom_name);
        this.productform.get("mrp")?.setValue(this.productdetails_list[0].product_price);
      })
    }
  
    productSubmit() {
      console.log(this.productform)
      var api = 'Einvoice/InvoicePostProduct';
      this.service.post(api, this.productform.value).subscribe((result: any) => {
        this.POproductsummary()
      },
      );
    }
  
    prodtotalcal() {
      this.discountamount = ((this.totalamount) * (this.discountpercentage) / 100);
      if (this.discountamount == undefined) {
        this.discountamount = 0;
      }
      this.totalamount = ((this.quantity) * (this.unitprice) - (this.discountamount) + (+this.taxamount1));
    }
  
    OnChangeTaxAmount1() {
      let tax_gid = this.productform.get('tax_name1')?.value;
     
      this.taxpercentage = this.getDimensionsByFilter(tax_gid);

  
      let tax_percentage = this.taxpercentage[0].percentage;
    
  
      this.taxamount1 = ((tax_percentage) * (this.totalamount) / 100);
      
      if (this.taxamount1 == undefined) {
        this.totalamount = ((this.quantity) * (this.unitprice) - (this.discountamount));
      }
      else {
        this.totalamount = ((this.quantity) * (this.unitprice) - (this.discountamount) + (+this.taxamount1));
      }
    }
  
    OnChangeTaxAmount2() {
      let tax_gid = this.productform.get('tax_name2')?.value;
      console.group(tax_gid)
      this.taxpercentage = this.getDimensionsByFilter(tax_gid);
      let tax_percentage = this.taxpercentage[0].percentage;
      console.group(tax_percentage)
  
      this.taxamount2 = ((tax_percentage) * (((this.quantity) * (this.unitprice) - (this.discountamount))) / 100);
  
      if (this.taxamount1 == undefined && this.taxamount2 == undefined) {
        this.totalamount = ((this.quantity) * (this.unitprice) - (this.discountamount));
      }
      else {
        this.totalamount = ((this.quantity) * (this.unitprice) - (this.discountamount) + (+this.taxamount1) + (+this.taxamount2));
      }
    }
 
  
    OnChangeTaxAmount3() {
      let tax_gid = this.productform.get('tax_name3')?.value;
  
      this.taxpercentage = this.getDimensionsByFilter(tax_gid);
      console.log(this.taxpercentage);
  
      let tax_percentage = this.taxpercentage[0].percentage;
      console.group(tax_percentage)
  
      this.taxamount3 = ((tax_percentage) * (((this.quantity) * (this.unitprice) - (this.discountamount))) / 100);
  
      this.totalamount = ((this.quantity) * (this.unitprice) - (this.discountamount) + (+this.taxamount3));
    }
  
    getDimensionsByFilter(id: any) {
      return this.tax_list.filter((x: { tax_gid: any; }) => x.tax_gid === id);     
    }
  
    finaltotal() {
      this.grandtotal = ((this.producttotalamount) + (+this.addoncharges) + (+this.frieghtcharges) + (+this.forwardingCharges) + (+this.insurancecharges) + (+this.roundoff) - (+this.discountamount));
    }
  
    openModaldelete(parameter: string) {
      this.parameterValue = parameter
    }
  
    ondelete() {
      var url = 'Einvoice/GetDeleteInvoiceProductSummary'
      let param = {
        podtl_gid: this.parameterValue
      }
      this.service.getparams(url, param).subscribe((result: any) => {
        if (result.status == true) {
          this.ToastrService.success(result.message)
  
          this.POproductsummary()
        }
        else {
  
          this.ToastrService.warning(result.message)
        }
      });
    }
    POproductsummary() {
      var api = 'Einvoice/GetInvoiceProductSummary';
      this.service.get(api).subscribe((result: any) => {
        this.responsedata = result;
        this.POproductlist = this.responsedata.POproductsummarylist;
        this.POAddForm.get("producttotalamount")?.setValue(this.responsedata.grand_total);
      });
    }
    onSubmit() {
    
  }
}
