import { Component } from '@angular/core';
import { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { SocketService } from 'src/app/ems.utilities/services/socket.service';
import { ToastrService } from 'ngx-toastr';
import { AES } from 'crypto-js';
interface IPricesegment {
  pricesegment_name: string;
  pricesegment_code: any;
  pricesegmentedit_name: string;
  pricesegmentedit_code: any;
}

@Component({
  selector: 'app-smr-mst-pricesegment',
  templateUrl: './smr-mst-pricesegment.component.html',
  styleUrls: ['./smr-mst-pricesegment.component.scss']
})
export class SmrMstPricesegmentComponent {

  reactiveFormReset!: FormGroup;
  reactiveForm!: FormGroup;
  responsedata: any;
  pricesegment_list: any;
  pricesegment!: IPricesegment;
  reactiveFormEdit: FormGroup | any;
  parameterValue1: any;
  pricesegment_gid:any;
  pricesegmentgrid_list: any[] = [];

  constructor(private formBuilder: FormBuilder, private router: Router, private ToastrService: ToastrService, public service: SocketService, public route: ActivatedRoute) {
    this.pricesegment = {} as IPricesegment;

  }


  data: any;
  parameterValue: any;



  onedit() { }

  ngOnInit(): void {
    this.GetSmrMstPricesegmentSummary();

    ///form values for add popup///
    this.reactiveForm = new FormGroup({
      pricesegment_name: new FormControl(this.pricesegment.pricesegment_name, [
        Validators.required,
      ]),
      pricesegment_code: new FormControl(this.pricesegment.pricesegment_code, [
        Validators.required,
      ]),
    });
    ///form values for edit///
    this.reactiveFormEdit = new FormGroup({
      pricesegmentedit_name: new FormControl(this.pricesegment.pricesegmentedit_name, [
        Validators.required,
      ]),
      pricesegmentedit_code: new FormControl(this.pricesegment.pricesegmentedit_code, [
        Validators.required,
      ]),
      pricesegment_gid: new FormControl(''),

    });
  }




  ////////////Get Summary for price segment//////////////////////
  GetSmrMstPricesegmentSummary() {
    var url = 'SmrMstPricesegmentSummary/GetSmrMstPricesegmentSummary'
    this.service.get(url).subscribe((result: any) => {
      $('#pricesegment_list').DataTable().destroy();
      this.responsedata = result;
      this.pricesegment_list = this.responsedata.pricesegment_list;
      setTimeout(() => {
        $('#pricesegment_list').DataTable();
      }, 1);


    });
  }

  /////////For Add PopUp/////////
  get pricesegment_name() {
    return this.reactiveForm.get('pricesegment_name')!;
  }
  get pricesegment_code() {
    return this.reactiveForm.get('pricesegment_code')!;
  }


  onsubmit() {
    if (this.reactiveForm.value.pricesegment_name != null && this.reactiveForm.value.pricesegment_code != null) {

      for (const control of Object.keys(this.reactiveForm.controls)) {
        this.reactiveForm.controls[control].markAsTouched();
      }
      this.reactiveForm.value;
      var url = 'SmrMstPricesegmentSummary/PostPriceSegment'
      this.service.post(url, this.reactiveForm.value).subscribe((result: any) => {

        if (result.status == false) {
          this.ToastrService.warning(result.message)
          this.GetSmrMstPricesegmentSummary();
        }
        else {
          this.reactiveForm.get("pricesegment_code")?.setValue(null);
          this.reactiveForm.get("pricesegment_name")?.setValue(null);
          this.ToastrService.success(result.message)
          this.reactiveForm.reset();

          this.GetSmrMstPricesegmentSummary();

        }

      });

    }
    else {
      this.ToastrService.warning('Kindly Fill All Mandatory Fields !! ')
    }
    
  }


  /////EDIT POPUP/////
  get pricesegmentedit_name() {
    return this.reactiveFormEdit.get('pricesegmentedit_name')!;
  }
  get pricesegmentedit_code() {
    return this.reactiveFormEdit.get('pricesegmentedit_code')!;
  }
  

  openModaledit(parameter: string) {
    this.parameterValue1 = parameter
    this.reactiveFormEdit.get("pricesegmentedit_code")?.setValue(this.parameterValue1.pricesegment_code);
    this.reactiveFormEdit.get("pricesegmentedit_name")?.setValue(this.parameterValue1.pricesegment_name);
    this.reactiveFormEdit.get("pricesegment_gid")?.setValue(this.parameterValue1.pricesegment_gid);

  };

  ////////////Update popup////////
  public onupdate(): void {
    if (this.reactiveFormEdit.value.pricesegmentedit_name != null && this.reactiveFormEdit.value.pricesegmentedit_code != null) {
      for (const control of Object.keys(this.reactiveFormEdit.controls)) {
        this.reactiveFormEdit.controls[control].markAsTouched();
      }
      this.reactiveFormEdit.value;

      var url = 'SmrMstPricesegmentSummary/UpdatedPriceSegment'

      this.service.post(url, this.reactiveFormEdit.value).pipe().subscribe((result: any) => {
        this.responsedata = result;
        if (result.status == false) {
          this.ToastrService.warning(result.message)
          this.GetSmrMstPricesegmentSummary();
        }
        else {
          this.ToastrService.success(result.message)
          this.GetSmrMstPricesegmentSummary();
        }

      });

    }
    else {
      this.ToastrService.warning('Kindly Fill All Mandatory Fields !! ')
    }
  }
  ////////////Delete popup////////
  openModaldelete(parameter: string) {
    this.parameterValue = parameter

  }
  ondelete() {
    console.log(this.parameterValue);
    var url = 'SmrMstPricesegmentSummary/deletePriceSegmentSummary'
    let param = {
      pricesegment_gid: this.parameterValue
    }
    this.service.getparams(url, param).subscribe((result: any) => {
      if (result.status == false) {
        this.ToastrService.warning(result.message)
      }
      else {
        this.ToastrService.success(result.message)
      }
      this.GetSmrMstPricesegmentSummary();



    });
  }


  ////Expandable Grid////
  ondetail(pricesegment_gid: any) {
    var url = 'SmrMstPricesegmentSummary/GetPricesegmentgrid'
    let param = {
      pricesegment_gid: pricesegment_gid
    }
    this.service.getparams(url, param).subscribe((result: any) => {
      this.responsedata = result;
      this.pricesegmentgrid_list = result.pricesegmentgrid_list;
      console.log(this.pricesegmentgrid_list)
      setTimeout(() => {
        $('#pricesegmentgrid_list').DataTable();
      }, 1);

    });
  }
  onclose(){
    this.reactiveForm.reset();
  }

  onadd(params:any){
    debugger
    const secretKey = 'storyboarderp';

    const param = (params);

    const encryptedParam = AES.encrypt(param,secretKey).toString();

    this.router.navigate(['/smr/SmrMstProductAssign',encryptedParam])
  }

}
