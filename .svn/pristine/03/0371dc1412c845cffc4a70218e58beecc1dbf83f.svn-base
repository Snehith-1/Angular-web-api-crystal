import { Component } from '@angular/core';
import { Router } from '@angular/router';
import { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';
import { AngularEditorConfig } from '@kolkov/angular-editor';
import { ToastrService } from 'ngx-toastr';
import { TabsModule } from 'ngx-bootstrap/tabs';
import { TabsetComponent } from 'ngx-bootstrap/tabs';
import { SocketService } from 'src/app/ems.utilities/services/socket.service';
import { AES } from 'crypto-js';

interface IWhatsappMessage {
platform:string;
localae:string;
template_name:string;
category:string;
category_change:string;
message_type:string;
name:string;
type:string;
description:string;
body:string;
footer:string;
projectId:string;
value1:string;
id:string;
}

@Component({
  selector: 'app-crm-smm-whatsappmessagetemplate',
  templateUrl: './crm-smm-whatsappmessagetemplate.component.html',
  styleUrls: ['./crm-smm-whatsappmessagetemplate.component.scss']
})
export class CrmSmmWhatsappmessagetemplateComponent {

  file!: File;
  image_path: any;
  responsedata: any;
  template_list: any[] = [];
  reactiveForm!: FormGroup;
  reactiveFormadd!: FormGroup;
  reactiveMessageForm!:FormGroup;

  whatsappmessage!: IWhatsappMessage;
  parameterValue1: any;
 

  constructor(private formBuilder: FormBuilder, private ToastrService: ToastrService,
    private route: Router, public service: SocketService) {
    this.whatsappmessage = {} as IWhatsappMessage;
}

ngOnInit(): void {
  

this.GetMessageTemplatesummary();

  this.reactiveForm = new FormGroup({
    platform: new FormControl(this.whatsappmessage.platform, [
      Validators.required,
    ]),
    localae: new FormControl(this.whatsappmessage.localae, [
    ]),
    template_name: new FormControl(this.whatsappmessage.template_name, [
    ]),
    category: new FormControl(this.whatsappmessage.category, [
    ]),
    category_change: new FormControl(this.whatsappmessage.category_change, [
    ]),
    message_type: new FormControl(this.whatsappmessage.message_type, [
    ]),
    type: new FormControl(this.whatsappmessage.type, [
    ]),
    name: new FormControl(this.whatsappmessage.name, [
    ]),
    projectId: new FormControl(this.whatsappmessage.projectId, [
    ]),
    description: new FormControl(this.whatsappmessage.description, [
    ]),
    value1: new FormControl(this.whatsappmessage.value1, [
    ]),
    body: new FormControl(this.whatsappmessage.body, [
      Validators.required,
    ]),
    footer: new FormControl(this.whatsappmessage.footer, [
      Validators.required,
    ]),  
    file: new FormControl(''),
      fileExtension: new FormControl(''),
      fileName: new FormControl(''),
      imagePath: new FormControl(''),
      id: new FormControl(this.whatsappmessage.id, [
      ]),
  });

 



}

get platform() {
  return this.reactiveForm.get('platform')!;
}
get localae() {
  return this.reactiveForm.get('localae')!;
}
get template_name() {
  return this.reactiveForm.get('template_name')!;
}
get category() {
  return this.reactiveForm.get('category')!;
}
get value() {
  return this.reactiveForm.get('value1')!;
}
get category_change() {
  return this.reactiveForm.get('category_change')!;
}
get message_type() {
  return this.reactiveForm.get('message_type')!;
}
get project_type() {
  return this.reactiveForm.get('type')!;
}
get project_name() {
  return this.reactiveForm.get('name')!;
}
get project_description() {
  return this.reactiveForm.get('description')!;
}
get body() {
  return this.reactiveForm.get('body')!;
}
get footer() {
  return this.reactiveForm.get('footer')!;
}
get image() {
  return this.reactiveForm.get('image')!;
}

onChange1(event: any) {
  this.file = event.target.files[0];
}
onclose() {
  this.reactiveMessageForm.reset();
}

 onprojectcreate(){
  this.whatsappmessage = this.reactiveForm.value;
  if (this.whatsappmessage.type != null &&this.whatsappmessage.name != null 
     && this.whatsappmessage.description != null) {
    console.log(this.reactiveForm.value)
    //  this.leadbank.region_name != null,this.leadbank.country_name != null  &&
    var api = 'Whatsapp/CreateProject';
    this.service.post(api, this.whatsappmessage).subscribe((result: any) => {
      console.log(result);
      if (result.status == false) {
        window.location.reload()
        this.ToastrService.warning(result.message)
      }
      else {
        // this.GetleadbranchaddSummary(this.leadbank_gid);
        // this.route.navigate(['/crm/CrmTrnLeadBankbranch',this.leadbank_gid]);
        window.location.reload()
        this.ToastrService.success(result.message)
      }
    });
  }
}

//// Summary Grid//////
GetMessageTemplatesummary(){
  var url = 'Whatsapp/GetMessageTemplatesummary'
  this.service.get(url).subscribe((result: any) => {
    $('#template_list').DataTable().destroy();
    this.responsedata = result;
    this.template_list = this.responsedata.whatsappMessagetemplatelist;
    //console.log(this.source_list)
    setTimeout(() => {
      $('#template_list').DataTable();
    }, 1);


  });
}

//Edit template//
openModaledit(parameter: string) {
  this.parameterValue1 = parameter
  this.reactiveForm.get("projectId")?.setValue(this.parameterValue1);

  }
onsubmit(){
  this.whatsappmessage = this.reactiveForm.value;
  if (this.whatsappmessage.body != null 
     && this.whatsappmessage.value1 != null) {
    console.log(this.reactiveForm.value)
    //  this.leadbank.region_name != null,this.leadbank.country_name != null  &&
    var api = 'Whatsapp/CreateTemplate';
    this.service.post(api, this.whatsappmessage).subscribe((result: any) => {
      console.log(result);
      if (result.status == false) {
        window.location.reload()
        this.ToastrService.warning(result.message)
      }
      else {
        // this.GetleadbranchaddSummary(this.leadbank_gid);
        // this.route.navigate(['/crm/CrmTrnLeadBankbranch',this.leadbank_gid]);
        window.location.reload()
        this.ToastrService.success(result.message)
      }
    });
  }
}

}