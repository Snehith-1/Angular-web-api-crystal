using ems.pmr.Models;
using ems.utilities.Functions;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Odbc;
using System.Web;

namespace ems.pmr.DataAccess
{
    public class DaPmrTrnDirectInvoice
    {
        dbconn objdbconn = new dbconn();
        cmnfunctions objcmnfunctions = new cmnfunctions();
        HttpPostedFile httpPostedFile;
        string msSQL = string.Empty;
        OdbcDataReader objODBCDatareader;
        DataTable dt_datatable;
        int mnResult, mnResult1, mnResult2, mnResult3, mnResult4, mnResult5;
        string msgetGID, msGetGID;
        public void DaGetVendornamedropDown(MdlPmrTrnDirectInvoice values)
        {
            msSQL = " select vendor_gid,vendor_companyname,contactperson_name,vendor_code from acp_mst_tvendor";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getModuleList = new List<GetVendornamedropdown>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getModuleList.Add(new GetVendornamedropdown
                    {
                        vendorgid = dt["vendor_gid"].ToString(),
                        vendorcompanyname = dt["vendor_companyname"].ToString(),
                    });
                    values.GetVendornamedropdown = getModuleList;
                }
            }
            dt_datatable.Dispose();
        }
        public void DaGetOnChangeVendor(string vendor_gid, MdlPmrTrnDirectInvoice values)
        {
            msSQL = " SELECT a.contactperson_name AS vendorcontact, a.contact_telephonenumber as phone, a.vendor_gid, a.vendor_gid as vendorcontact_gid" +
                    " FROM acp_mst_tvendor a  where a.vendor_gid = '" + vendor_gid + "'" +
                    " UNION" +
                    " Select b.vendorcontact_name, b.mobile, b.vendor_gid, b.vendorcontact_gid" +
                    " FROM pmr_trn_tvendorcontact b where b.vendor_gid='" + vendor_gid + "'";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getModuleList = new List<GetOnChangeVendor>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getModuleList.Add(new GetOnChangeVendor
                    {
                        vendorcontact = dt["vendorcontact"].ToString(),
                        phone = dt["phone"].ToString(),
                    });
                    values.GetOnChangeVendor = getModuleList;
                }
            }
            dt_datatable.Dispose();
        }
        public void DaGetPurchaseTypedropDown(MdlPmrTrnDirectInvoice values)
        {
            msSQL = " Select a.account_gid, a.purchasetype_name from pmr_trn_tpurchasetype a where a.account_gid <> 'null' ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getModuleList = new List<GetPurchaseTypedropDown>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getModuleList.Add(new GetPurchaseTypedropDown
                    {
                        account_gid = dt["account_gid"].ToString(),
                        purchasetype_name = dt["purchasetype_name"].ToString(),
                    });
                    values.GetPurchaseTypedropDown = getModuleList;
                }
            }
            dt_datatable.Dispose();
        }
        public void DaGetExtraAddondropDown(MdlPmrTrnDirectInvoice values)
        {
            msSQL = " select additional_gid, additional_name from pmr_trn_tadditional ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getModuleList = new List<GetExtraAddondropDown>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getModuleList.Add(new GetExtraAddondropDown
                    {
                        additional_gid = dt["additional_gid"].ToString(),
                        additional_name = dt["additional_name"].ToString(),
                    });
                    values.GetExtraAddondropDown = getModuleList;
                }
            }
            dt_datatable.Dispose();
        }
        public void DaGetExtraDeductiondropDown(MdlPmrTrnDirectInvoice values)
        {
            msSQL = " select discount_gid, discount_name from pmr_trn_tdiscount ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getModuleList = new List<GetExtraDeductiondropDown>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getModuleList.Add(new GetExtraDeductiondropDown
                    {
                        discount_gid = dt["discount_gid"].ToString(),
                        discount_name = dt["discount_name"].ToString(),
                    });
                    values.GetExtraDeductiondropDown = getModuleList;
                }
            }
            dt_datatable.Dispose();
        }

        public void Dadirectinvoicesubmit(string employee_gid, directsalesinvoicelist values)
        {
            string ls_referenceno = objcmnfunctions.GetMasterGID("PINV");
            msgetGID = objcmnfunctions.GetMasterGID("SIVP");
            msGetGID = objcmnfunctions.GetMasterGID("DINV");

            msSQL = " insert into acp_trn_tinvoice(" +
                 " invoice_gid," +
                 " vendor_gid," +
                 " invoice_refno," +
                 " invoice_reference," +
                 " user_gid," +
                 " invoice_date," +
                 " payment_date," +
                 " additionalcharges_amount," +
                 " discount_amount," +
                 " total_amount," +
                 " invoice_amount," +
                 " payment_term," +
                 " created_date," +
                 " invoice_status, " +
                 " invoice_flag, " +
                 " invoice_remarks " +
                 " additionalcharges_amount_L," +
                 " discount_amount_L," +
                 " total_amount_L," +
                 " currency_code," +
                 " exchange_rate," +
                 " freightcharges," +
                 " extraadditional_amount," +
                 " extradiscount_amount," +
                 " extraadditional_amount_L," +
                 " extradiscount_amount_L," +
                 " buybackorscrap," +
                 " vendorinvoiceref_no," +
                 " branch_gid," +
                 " round_off," +
                 ") values (" +
                 "'" + msgetGID + "'," +
                 "'" + values.vendor_gid + "'," +
                 "'" + ls_referenceno + "'," +
                 "'" + msGetGID + "'," +
                 "'" + employee_gid + "'," +
                 "'" + values.direct_invoice_date.ToString("yyyy-MM-dd ") + "'," +
                 "'" + values.direct_invoice_due_date.ToString("yyyy-MM-dd ") + "'," +
                 "'" + values.direct_invoice_addon_amount + "'," +
                 "'" + values.direct_invoice_discount_amount + "'," +
                 "'" + values.direct_invoice_grand_total + "'," +
                 "'" + values.direct_invoice_amount + "'," +
                 "'" + values.direct_invoice_payterm + "'," +
                 "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                 "'Payment Pending'," +
                 "'Invoice Approval Pending'," +
                 "'" + values.direct_invoice_remarks + "'," +
                 "'" + values.direct_invoice_addon_amount + "'," +
                 "'" + values.direct_invoice_discount_amount + "'," +
                 "'" + values.direct_invoice_grand_total + "'," +
                 "'" + values.direct_invoice_currency_code + "'," +
                 "'" + values.direct_invoice_exchange_rate + "'," +
                 "'" + values.direct_invoice_freight_charges + "'," +
                 "'" + values.direct_invoice_extra_addon + "'," +
                 "'" + values.direct_invoice_extra_deduction + "'," +
                 "'" + values.direct_invoice_addon_amount + "'," +
                 "'" + values.direct_invoice_extra_deduction + "'," +
                 "'" + values.direct_invoice_buyback_scrap_charges + "'," +
                 "'" + values.vendorinvoiceref_no + "'," +
                 "'" + values.branch_gid + "'," +
                 "'" + values.direct_invoice_round_off + "')";

            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult == 1)
            {
                msSQL = " insert into acp_trn_tinvoicedtl(" +
                " invoicedtl_gid," +
                " invoice_gid," +
                " product_price," +
                " product_total," +
                " tax_name," +
                " invoice_date," +
                " payment_date," +
                " additionalcharges_amount," +
                " discount_amount," +
                " total_amount," +
                " invoice_amount," +
                " payment_term," +
                " created_date," +
                " invoice_status, " +
                " invoice_flag, " +
                " invoice_remarks " +
                " additionalcharges_amount_L," +
                " discount_amount_L," +
                " total_amount_L," +
                " currency_code," +
                " exchange_rate," +
                " freightcharges," +
                " extraadditional_amount," +
                " extradiscount_amount," +
                " extraadditional_amount_L," +
                " extradiscount_amount_L," +
                " buybackorscrap," +
                " vendorinvoiceref_no," +
                " branch_gid," +
                " round_off," +
                ") values (" +
                "'" + msgetGID + "'," +
                "'" + values.vendor_gid + "'," +
                "'" + ls_referenceno + "'," +
                "'" + msGetGID + "'," +
                "'" + employee_gid + "'," +
                "'" + values.direct_invoice_date.ToString("yyyy-MM-dd ") + "'," +
                "'" + values.direct_invoice_due_date.ToString("yyyy-MM-dd ") + "'," +
                "'" + values.direct_invoice_addon_amount + "'," +
                "'" + values.direct_invoice_discount_amount + "'," +
                "'" + values.direct_invoice_grand_total + "'," +
                "'" + values.direct_invoice_amount + "'," +
                "'" + values.direct_invoice_payterm + "'," +
                "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                "'Payment Pending'," +
                "'Invoice Approval Pending'," +
                "'" + values.direct_invoice_remarks + "'," +
                "'" + values.direct_invoice_addon_amount + "'," +
                "'" + values.direct_invoice_discount_amount + "'," +
                "'" + values.direct_invoice_grand_total + "'," +
                "'" + values.direct_invoice_currency_code + "'," +
                "'" + values.direct_invoice_exchange_rate + "'," +
                "'" + values.direct_invoice_freight_charges + "'," +
                "'" + values.direct_invoice_extra_addon + "'," +
                "'" + values.direct_invoice_extra_deduction + "'," +
                "'" + values.direct_invoice_addon_amount + "'," +
                "'" + values.direct_invoice_extra_deduction + "'," +
                "'" + values.direct_invoice_buyback_scrap_charges + "'," +
                "'" + values.vendorinvoiceref_no + "'," +
                "'" + values.branch_gid + "'," +
                "'" + values.direct_invoice_round_off + "')";













            }
        }
    }
}