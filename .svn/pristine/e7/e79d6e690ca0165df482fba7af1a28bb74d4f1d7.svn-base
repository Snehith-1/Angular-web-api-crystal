import { Component,OnInit,ElementRef,ViewChild } from '@angular/core';
import {
  FormBuilder, FormControl, FormGroup, Validators, ValidationErrors,
  AbstractControl,
  ValidatorFn
} from '@angular/forms';
import { ToastrService } from 'ngx-toastr';
import { SocketService } from 'src/app/ems.utilities/services/socket.service';
import { NgxSpinnerService } from 'ngx-spinner';

interface IFacebook {
  image_caption: string;
  video_caption: string;

}
@Component({
  selector: 'app-crm-smm-facebookpage',
  templateUrl: './crm-smm-facebookpage.component.html',
  styleUrls: ['./crm-smm-facebookpage.component.scss']
})
export class CrmSmmFacebookpageComponent {
  @ViewChild ('Inbox') tableRef!: ElementRef;

  searchTerm: string = '';
  searchResults: string[] = [];
  searchText: any;
  search: string = '';

  file!: File;
  facebook_list: any;
  username: any;
  picture: any;
  friends: any;
  posts: any;
  filteredData: any;
  videos: any;
  posts1: string[] = [];
  posts2: string[] = [];
  posts3: string[] = [];
  posts4: string[] = [];
  email: any;
  birthday: any;
  gender: any;
  age_range: any;
  hometown: any;
  present: any;
  currentPage: number = 1;
  pageSize: number = 5;
  responsedata: any;
  facebookuser_list: any;
  facebookpage_list: any;
  followers_count: any;
  link: any;
  id: any;
  cover: any;
  phone: any;
  category: any;
  facebook!: IFacebook;
  FacebookImageForm!: FormGroup;
  windowInterval:any;
  constructor(private formBuilder: FormBuilder, private ToastrService: ToastrService, public service: SocketService, private NgxSpinnerService: NgxSpinnerService) {
    this.facebook = {} as IFacebook;
  }
  ngOnInit(): void {
    this.GetPagesummary();   
    this.GetPageuserdetails();   
    this.GetPagedetails();   

    this.FacebookImageForm = new FormGroup({

      image_caption: new FormControl(this.facebook.image_caption, [
        Validators.required,
        this.noWhitespaceValidator(),

      ]),
    });
  }
  GetPagedetails() {
  var url1 = 'Facebook/GetPagedetails'
  this.service.get(url1).subscribe((result,) => {
  });
  }
  GetPageuserdetails() {
    this.NgxSpinnerService.show();
  var url = 'Facebook/GetPageuserdetails'
  this.service.get(url).subscribe((result: any) => {
    $('#facebookuser_list').DataTable().destroy();
    // window.location.reload()
    this.responsedata = result;
    this.facebookuser_list = this.responsedata.facebookuser_list;
    this.NgxSpinnerService.hide();
    setTimeout(() => {
      $('#facebookuser_list').DataTable();
    }, 1);  });
}
GetPagesummary() {
 
this.windowInterval = window.setInterval(() => {
  var url = 'Facebook/GetPagesummary'
  this.service.get(url).subscribe((result: any) => {
    this.facebookpage_list = result.facebookpage_list;
   
  });
}, 1000);
}
filter(searchTerm: any){

}

filterData() {
  if (this.search) {
    this.filteredData = this.facebookpage_list.filter((item: { property1: string; property2: string; }) => {
      return item.property1.toLowerCase().includes(this.search.toLowerCase()) ||
             item.property2.toLowerCase().includes(this.search.toLowerCase());
      // Add more conditions for other properties if needed
    });
  } else {
    this.filteredData = this.facebookpage_list;
  }
}

matchesSearch(item: any): boolean {
  const searchString = this.searchText.toLowerCase();
  return item.sub.toLowerCase().includes(searchString) || item.value.toLowerCase().includes(searchString);
}
searchFunction() {
  const filterValue = this.searchText.toLowerCase();
  const rows = this.tableRef.nativeElement.getElementsByTagName('tr');

  for (let i = 0; i < rows.length; i++) {
    const cells = rows[i].getElementsByTagName('td');
    let foundMatch = false;

    for (let j = 0; j < cells.length; j++) {
      const cellText = cells[j].textContent || cells[j].innerText;

      if (cellText.toLowerCase().indexOf(filterValue) > -1) {
        foundMatch = true;
        break;
      }
    }

    if (foundMatch) {
      rows[i].style.display = '';
    } else {
      rows[i].style.display = 'none';
    }
  }
}
pageChanged(event: any): void {
  this.currentPage = event;
}
countSizes = [5, 10, 20, 50]; // Available count size options
  selectedCountSize = 5; 

   updatePageSize() {
    this.pageSize = this.selectedCountSize;
  }
ngOnDestroy(): void {
  clearInterval(this.windowInterval)
}
// this.windowInterval = window.setInterval(() => {
//   var url = 'Facebook/GetPageuserdetails'
//   this.socketservice.get(url).subscribe((result: any) => {
//     this.facebookuser_list = result.facebookuser_list;
   
//   });
// }, 1000);
  noWhitespaceValidator(): ValidatorFn {
    return (control: AbstractControl): ValidationErrors | null => {
      const isWhitespace = (control.value || '').trim().length === 0;
      return isWhitespace ? { whitespace: true } : null;
    };
  }
  // GetPagedetails() {
  //   var url1 = 'Facebook/GetPagedetails'
  //   this.service.get(url1).subscribe((result,) => {

  //     this.facebookpage_list = result;
  //     this.username = this.facebookpage_list.name;
  //     this.id = this.facebookpage_list.id;
  //     this.link = this.facebookpage_list.link;
  //     this.phone = this.facebookpage_list.phone;
  //     this.followers_count = this.facebookpage_list.followers_count;
  //     this.picture = this.facebookpage_list.picture.data.url;
  //     this.cover = this.facebookpage_list.cover.source;
  //     this.category = this.facebookpage_list.category
  //     this.posts = this.facebookpage_list.posts.data
  //     this.videos = this.facebookpage_list.videos.data

  //     // console.log(this.facebookpage_list)

  //   });



  // }


  onChange2(event: any) {
    this.file = event.target.files[0];

  }
  ////////////Add popup validtion////////
  get image_caption() {
    return this.FacebookImageForm.get('image_caption')!;
  }
  public onsubmit(): void {
    let formData = new FormData();
    if (this.file != null && this.file != undefined) {


      formData.append("file", this.file, this.file.name);

      formData.append("image_caption", this.FacebookImageForm.value.image_caption);
      var api = 'Facebook/UploadImage'
      this.service.postfile(api, formData).subscribe((result: any) => {

        if (result.status == false) {
          this.FacebookImageForm.reset();
          this.GetPagedetails();
          this.ToastrService.warning(result.message)
        }
        else {
          this.FacebookImageForm.reset();
          this.GetPagedetails();
          this.ToastrService.success(result.message)
        }
      });

    } else {
      this.ToastrService.warning("Kindly Upload Image/Video !!")
    }
  }
  onclose() {
    this.FacebookImageForm.reset();

  }
}
