import { Component,OnInit,ElementRef,ViewChild } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { SocketService } from 'src/app/ems.utilities/services/socket.service';
import { ToastrService } from 'ngx-toastr';
import { AES } from 'crypto-js';


@Component({
  selector: 'app-crm-smm-emailmanagement',
  templateUrl: './crm-smm-emailmanagement.component.html',
  styleUrls: ['./crm-smm-emailmanagement.component.scss']
})
export class CrmSmmEmailmanagementComponent {
  @ViewChild ('Inbox') tableRef!: ElementRef;

  search: string = '';
  response_data: any;
  mailmanagement: any[] = [];
  reactiveForm!: FormGroup;
  parameterValue1: any;
  mailsummary_list: any;
  mail: any;
  from_mail: any;
  to_mail: any;
  subject: any;
  body_content: any;
  mailcount_list: any[] = [];
  responsedata: any;
  filteredData: any;
  clicktotal_count:any;
  deliverytotal_count:any;
  opentotal_count:any;
  searchTerm: string = '';
  searchResults: string[] = [];
  searchText: any;
  items = [];
  currentPage: number = 1;
  pageSize: number = 50;
  mailevent_list: any;
  

  constructor(private fb: FormBuilder, private route: ActivatedRoute, private router: Router, private service: SocketService, private ToastrService: ToastrService,) { }
  ngOnInit(): void {
    this.GetMailSummary();
    this.GetMailEventCount();
    this.GetMailEventClick();
    this.GetMailEventDelivery();
    this.GetMailEventOpen();
  }
  GetMailSummary() {
    
    var api = 'MailCampaign/GetMailSummary';
    this.service.get(api).subscribe((result: any) => {
      $('#mail').DataTable().destroy();

      this.response_data = result;
      this.mailsummary_list = this.response_data.mailsummary_list;
      this.filteredData = this.mailsummary_list
      setTimeout(() => {
        $('#mail').DataTable();
      }, 1);
    });

  }
  GetMailEventCount(){
    var api2 = 'MailCampaign/GetMailEventCount'
    this.service.get(api2).subscribe((result:any) => {
    this.mailcount_list = result.mailcount_list; 
    this.clicktotal_count=this.mailcount_list[0].clicktotal_count;
    this.opentotal_count=this.mailcount_list[0].opentotal_count;
    this.deliverytotal_count=this.mailcount_list[0].deliverytotal_count;
    });}
    GetMailEventOpen() {
      var api = 'MailCampaign/GetMailEventOpen'
      this.service.get(api).subscribe((result: any) => {
        this.response_data = result;
        this.mailevent_list = this.response_data.mailevent_list;
      });
    }
    GetMailEventClick() {
      var api = 'MailCampaign/GetMailEventClick'
      this.service.get(api).subscribe((result: any) => {
        this.response_data = result;
        this.mailevent_list = this.response_data.mailevent_list;
      });
    }
    GetMailEventDelivery() {
      var api = 'MailCampaign/GetMailEventDelivery'
      this.service.get(api).subscribe((result: any) => {
        this.response_data = result;
        this.mailevent_list = this.response_data.mailevent_list;
      });
    }
  
  onadd() {
    this.router.navigate(['/crm/CrmCampaignMailmanagement'])

  } 
  popmodal(parameter: string) {
    this.parameterValue1 = parameter

    this.to_mail = this.parameterValue1.to;

    this.from_mail = this.parameterValue1.from;

    this.subject = this.parameterValue1.sub;

    this.body_content = this.parameterValue1.body;

  }
  //mailsummary_list

  filter(searchTerm: any){

  }

  filterData() {
    if (this.search) {
      this.filteredData = this.mailsummary_list.filter((item: { property1: string; property2: string; }) => {
        return item.property1.toLowerCase().includes(this.search.toLowerCase()) ||
               item.property2.toLowerCase().includes(this.search.toLowerCase());
        // Add more conditions for other properties if needed
      });
    } else {
      this.filteredData = this.mailsummary_list;
    }
  }

  matchesSearch(item: any): boolean {
    const searchString = this.searchText.toLowerCase();
    return item.sub.toLowerCase().includes(searchString) || item.value.toLowerCase().includes(searchString);
}

searchFunction() {
  const filterValue = this.searchText.toLowerCase();
  const rows = this.tableRef.nativeElement.getElementsByTagName('tr');

  for (let i = 0; i < rows.length; i++) {
    const cells = rows[i].getElementsByTagName('td');
    let foundMatch = false;

    for (let j = 0; j < cells.length; j++) {
      const cellText = cells[j].textContent || cells[j].innerText;

      if (cellText.toLowerCase().indexOf(filterValue) > -1) {
        foundMatch = true;
        break;
      }
    }

    if (foundMatch) {
      rows[i].style.display = '';
    } else {
      rows[i].style.display = 'none';
    }
  }
}

pageChanged(event: any): void {
  this.currentPage = event;
}
countSizes = [5, 10, 20, 50]; // Available count size options
  selectedCountSize = 5; 

   updatePageSize() {
    this.pageSize = this.selectedCountSize;
  }
  viewpage(params: any){
    const secretKey = 'storyboarderp';
   const param = (params); 
   const mailmanagement_gid = AES.encrypt(param, secretKey).toString();
   this.router.navigate(['/crm/CrmSmmSendmail',mailmanagement_gid]);
  }
  
}
